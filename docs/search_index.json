[["index.html", "GEO-77 Introduction to R Preface", " GEO-77 Introduction to R Mathias Bellat 2024-11-07 Preface This is an introduction course to R language applied for Physical Geographical science in GEO77 teaching. This course will help you with the basis of R language and first uses of Machine Learning. General info: Name and email: Mathias Bellat Ph.D. candidate, SFB1070 ResourcesCultures, Working group geomorphology and soil sciences. Email : mathias.bellat@uni-tuebingen.de. Dates: 22/10, 29/10, 5/11 and 12/11 Language: English. Working time: 4 hours during class and around 3 - 4 hours weekly at home (extra readings and exercises). Resources: In the “Reference chapter” and on the ILLAS webpage GEO77 with the password “SoilScience”. Objectives: Get basic of R language under RStudio, different type of features, writing an algorithms, importing and exporting data. Importing geo-referenced data into R. Digital soil mapping of soil properties into different environmental contexts. "],["r-introduction-course.html", "1 R Introduction Course 1.1 General introduction 1.2 Resources 1.3 Installing R and dependencies 1.4 First overview of R 1.5 RStudio Environment 1.6 Exercices 1.7 Additionnal Ressources", " 1 R Introduction Course 1.1 General introduction 1.1.1 Short history and philosophy of R R is a free and open-source system developed at the beginning of the 1990s by Ross Ihaka and Robert Gentleman at Auckland University (1993). In 1996 they published the first paper on R language (Ihaka and Gentleman 1996) named: Ross Ihaka and Robert Gentleman. R:“A language for data analysis and graphics.” Journal of Computational and Graphical Statistics, 5(3):299–314, 1996, and in 1997 started the R Core Group/Team a team of statisticians and computer scientists. They released in 2000 the first public version of R (1.0.0). In addition to this, the Comprehensive R Archive Network or CRAN where the R code is stored, also hosted additional packages from users. On 03/10/2022 more than 20,000 packages were stored on the CRAN against 200 in 2003 and 9,000 in 2015 (Tippmann 2015). Another important part of R is its free-user dimension. The development of this language was highly inspired by a previous language the S. Developed by John Chambers in the Nokia Bell Laboratory during the 1970s it was designed by and for data scientists and not programmers. The philosophy of freely accessible software for everyone quickly developed and can be described as : “[We] wanted users to be able to begin in an interactive environment, where they did not consciously think of themselves as programming. Then as their needs became clearer and their sophistication increased, they should be able to slide gradually into programming, when the language and system aspects would become more important.” John Chambers However, the S language was unclear to many users and it lead to the development of the R language in 1990. In 1995, following this “S philosophy”, R. Ihaka and R. Gentleman adopted the GNU General Public Licence for the R language. This licence gives free use to any user of the code. Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. GNU General Public Licence More broadly the GNU (development of freely accessible software ), founded by Richard Stallman, follows the Free Software Foundation policies : “The freedom to run the program, for any purpose (freedom 0).” “The freedom to study how the program works, and adapt it to your needs (freedom 1).”Access to the source code is a precondition for this.” “The freedom to redistribute copies so you can help your neighbour (freedom 2).” “The freedom to improve the program, and release your improvements to the public, so that the whole community benefits (freedom 3). Access to the source code is a precondition for this.” Free Software Foundation Figure 1.1: Short history of R from Giorgi, Ceraolo, and Mercatelli (2022). A more detailed history of R development and first objectifs. 1.1.2 Why R? It is hard to answer this question in one sentence. But several points can be raised : The non-cost of this software compared to heavy ones from other platforms. The high number of packages developed and freely available allows more and more analysis in many fields of applications. As depicted in Tippmann (2015) the idea of knowing “what you are doing to your data” and not having a black box treatment of your data. Mastering the whole chaine opératoire from the cleaning of your raw data to the publishing of reports or graphics. Allows others to see your code and treatment “the reproducibility of the experiment”. One of the most used programming languages, in the top 20 of the TIOBE Index for many years. Figure 1.2: Number of publications quoting R (Tippmann 2015). 1.2 Resources The R community is well developed online and you can found many resources on several websites. For the basics resources you have: https://cran.r-project.org/: R original deposit of the CRAN. https://rstudio.com/products/rstudio/: Rstudio is the most commonly used IDE for R. https://Github.com: GitHub, a website with developers’ codes and packages freely accessible. Also some topics about issues and bugs in R. To solve coding problems and bugs: https://r-grrr.slack.com/ Slack of R users (question/answers, actuality…). https://www.r-bloggers.com/ R-bloggers. https://stackoverflow.com/questions/tagged/r/ Stackoverflow (very useful). 1.3 Installing R and dependencies 1.3.1 R and Rstudio First, you will need to install R on https://cran.r-project.org/. Choose the fitted version for your computer system. Figure 1.3: R software view. Then you will need an Integrated Development Environment (IDE) which allows you to have a more comprehensive overview and easier access to packages and other online features from R. The most commonly used IDE for R is Rstudio. You can download it via https://posit.co/download/rstudio-desktop/, and select the free version for your exploitation system. Figure 1.4: RStudio IDE view. 1.3.2 R Packages If basic R already handles many data, the true power of this language is to have more than 10 000 additional updated packages freely available online. Most of them can be directly downloaded on the CRAN website while others will be accessible only via their GitHub deposit. To download the package you have several different solutions: The easiest way is using the Package windows of Rstudio and directly downloading it from the CRAN deposit. You can also use the following code to download it install.packages(\"\"). If the package is not available on the CRAN deposit you can directly download it from the GitHub site. You will need first to download the “remote” package to access online content. Then you can type the URL of the link to your package. install.packages(&quot;remotes&quot;) #install &quot;remotes&quot; package. devtools::install_github(&quot;philipp-baumann/simplerspec&quot;, force = FALSE) # The &quot;force&quot; parameter (TRUE or FALSE) depending if you want to overwrite your previous download of the package Last but not least, you can manually download the .zip or .tar.gz of the package online and unpacked it via the package windows of Rstudio or directly to your R folder (1.5) Once you download the package you have to load it to your environment. You can do it with the line library() , you will have to do it every time you start a new session in R. Figure 1.5: RStudio Package window view. 1.4 First overview of R 1.4.1 Basic commands You can open a new R window to start typing some code lines. R is based on statistical treatment so numbers and operations are one of the most important components of this language. You can type basic operations to get familiar with the syntax: &gt; 2+3 [1] 5 &gt; 2*3 [1] 6 &gt; 2^3 [1] 8 Special operators can also be used. &gt; pi [1] 3.141593 &gt; sqrt(2) [1] 1.414214 For letters and other characters you can use the print()command. It does work for special operators but not if several are used at the same time. &gt; print(&quot;Hello World&quot;) [1] &quot;Hello world&quot; &gt; print(pi) [1] 1.414214 &gt; print(&quot;The zero occurs at&quot;, 2 * pi, &quot;radians.&quot;) Error in print.default(&quot;The zero occurs at&quot;, 2 * pi, &quot;radians.&quot;): invalid &#39;quote&#39; argument To be able to use both numeric or special operators and characters, use the cat() command. You need to end it with the \"\\n\" code. &gt; cat(&quot;The zero occurs at&quot;, 2 * pi, &quot;radians.&quot;, &quot;\\n&quot;) The zero occurs at 6.283185 radians. Figure 1.6: R basic commands. An important topic is the help() command (in Rstudio ? can also work). This function will give access to the description of the command you are typing inside the strings. With an internet connection on Rstudio the ?? line will give you information on your command even if it is coming from a non-downloaded package. Figure 1.7: R help window after typing the help(c) command. 1.4.2 Setting variables Analyzing data is important but if we can not store them we won’t be able to go very far. You can store any variable with the &lt;- or = code. The most important variables are numbers and character strings. &gt; x &lt;- pi &gt; y = 2*2 &gt; print(x*y) [1] 12.56637 Numerical values On the upper code line, it is a number variable storage (Numeric values). &gt; a &lt;- &quot;The zero occurs at&quot; &gt; b = &quot;radians.&quot; &gt; cat(a, 2 * x, b, &quot;\\n&quot;) The zero occurs at 6.283185 radians. Character values On the upper code line, it is two character string variables storage (Character values) combined with a number variable. We can also give a vector several numbers (Vector of numbers) or several characters (Vector of character strings) with the code line c(). &gt; a &lt;- c(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;, &quot;Black&quot;, &quot;White&quot;) &gt; b &lt;- c(5, 6, 6, 8, 11) &gt; print(a) [1] &quot;Red&quot; &quot;Blue&quot; &quot;Green&quot; &quot;Black&quot; &quot;White&quot; &gt; b [1] 5 6 6 8 11 Useful commands You have to distinguish the class of data from its mode. The class can be seen as the structure of the data while the mode is just the “type” of data. In simple vectors there is no difference but on more complex objects you will have a specific class for the all structure (matrices, arrays…) while the data stored inside will be related to one or several mode (numeric, character, logical…) To know the class of your variable you can use the class()command and to know the mode (type of info stored) the mode(). The str() function will give you more information about the data and its class. &gt; str(a) [1] chr [1:5] &quot;Red&quot; &quot;Blue&quot; &quot;Green&quot; &quot;Black&quot; &quot;White&quot; &gt; class(b) [1] &quot;numeric&quot; &gt; mode(print) [1] &quot;function&quot; Two other important commands are ls() which gives you your number of saved variable and rm() which remove one variable. ls.str() is a transformed way to see the content of each variable and not only there name. You can remove all your variable by making rm(list = ls()). The c(1:10) used here gives a vector list of ten numbers from 1 to 10. The : function create a sequence of numbers. &gt; y &lt;- 3 &gt; y &lt;- &quot;Red&quot; &gt; z &lt;- c(1:10) &gt; ls() [1] &quot;x&quot; &quot;y&quot; &quot;z&quot; &gt; ls.str() x : num 3 y : chr &quot;RED&quot; z : int [1:10] 1 2 3 4 5 6 7 8 9 10 &gt; rm(list = ls()) &gt; ls() character(0) To generate a more “complex” sequence you can use the seq(x, y, n) function where x is the starting number, y is the ending number and n is the interval. If you want to create a sequence with a specific number of intervals you can use the length.out = argument before n. &gt; seq(2, 50, 4) [1] 2 6 10 14 18 22 26 30 34 38 42 46 50 &gt; seq(2, 50, length.out = 4) [1] 2 18 34 50 Matrices and Arrays You can combine vectors together in order to create matrices the first time. There are different ways of combining them. When can combine the different vector numbers with c() and then give a specific dimension x,y to the combined vector with dim(x,y) command. Or we can directly combine the two vectors as different columns from one matrix with cbind(col1, col2) or if you prefer combine via the rows with rbind(row1, row2). Another possible way is with matrix(data, nrow = n, ncol = n). &gt; b &lt;- c(5, 6, 6, 8, 11) &gt; d &lt;- c(12, 3, 4, 5, 6) &gt; matrix &lt;- c(b,d) &gt; matrix [1] 5 6 6 8 11 12 3 4 5 6 &gt; dim(matrix) &lt;- c(2,5) # first the rows number then the columns number &gt; print (matrix) [,1] [,2] [,3] [,4] [,5] [1,] 5 6 11 3 5 [2,] 6 8 12 4 6 &gt; matrix &lt;- cbind(b, d) &gt; print(matrix) b d [1,] 5 12 [2,] 6 3 [3,] 6 4 [4,] 8 5 [5,] 11 6 &gt; dim(matrix) [1] 5 2 &gt; matrix &lt;- rbind(b, d) &gt; print(matrix) [,1] [,2] [,3] [,4] [,5] [1,] 5 6 11 3 5 [2,] 6 8 12 4 6 &gt; dim(matrix) [1] 2 5 &gt; class(matrix) [1] &quot;matrix&quot; &quot;array&quot; The type array is a multidimensional n vectors. We will prefer data frame format or list format for combining different types of data. However, if you want more precision on array data you can look into Long and Teetor (2019) pp.131 - 132 or Team, Venables, and Smith (2022). Factor values Another type of important data is the factor class. They are defined as a vector of enumerated values. There is two type of factor the Grouping and the Categorical variables which are commonly used for ANOVA testing. The specificity of the factor is that they contain several levels (one for each type of factor). You can access the levels with levels()to see their names or nlevels()to see the number of levels. Transformation You can force R to convert data from a previous class to another with the as.x() code where x is replaced by the format (data frame, numeric, character….). In our case here you can ask as.factor(). &gt; x &lt;- factor(c(&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;TRUE&quot;,&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;NO DATA&quot;,&quot;TRUE&quot;, &quot;FALSE&quot;)) &gt; class(x) [1] &quot;factor&quot; &gt; levels(x) [1] &quot;FALSE&quot; &quot;NO DATA&quot; &quot;TRUE&quot; &gt; a &lt;- c(&quot;Red&quot;, &quot;Blue&quot;, &quot;Green&quot;, &quot;Black&quot;, &quot;White&quot;) &gt; y &lt;- as.factor(a) &gt; nlevels(y) [1] 5 #one for each type of character You can also order factors by adding the ordered = TRUE code inside the factor() function. This can be useful when sorting the data you are dealing. &gt; x &lt;- factor(c(&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;TRUE&quot;,&quot;TRUE&quot;,&quot;FALSE&quot;,&quot;NO DATA&quot;,&quot;TRUE&quot;, &quot;FALSE&quot;)) &gt; sorted &lt;- factor(x, ordered = TRUE, levels = c(&quot;NO DATA&quot;, &quot;FALSE&quot;, &quot;TRUE&quot;)) &gt; sorted [1] TRUE FALSE TRUE TRUE FALSE NO DATA TRUE FALSE Levels: NO DATA &lt; FALSE &lt; TRUE Lists and data frames Two very common data types we will see here are List and Data Frame. A list can be seen as a collection of objects. They can be from different modes and sizes without any restrictions except for having different names. The data frame (more broadly used in Data Science) can be seen as a specific type of list with two conditions : All elements of a data frame are vectors. All elements of a data frame have an equal length. For a list, you can type the list() code. The detail code is list(name_1 = object_1, …, name_m = object_m). The data frame looks similar to the list() function. You can write it down with the data.frame() code line. If you try to create a data frame with an unequal number between vectors it will notice it. &gt; Lst &lt;- list(name=&quot;Fred&quot;, wife=&quot;Mary&quot;, no.children=3, child.ages=c(4,7,9)) &gt; str(Lst) List of 4 $ name : chr &quot;Fred&quot; $ wife : chr &quot;Mary&quot; $ no.children: num 3 $ child.ages : num [1:3] 4 7 9 &gt; &gt; df &lt;- data.frame(id=1:3, name=c(&quot;Moe&quot;, &quot;Larry&quot;, &quot;Curly&quot;), age=c(1:3)) &gt;str(df) &#39;data.frame&#39;: 3 obs. of 3 variables: $ id : int 1 2 3 $ name: chr &quot;Moe&quot; &quot;Larry&quot; &quot;Curly&quot; $ age : int 1 2 3 &gt; &gt; df &lt;- data.frame(id=1:3, name=c(&quot;Moe&quot;, &quot;Larry&quot;, &quot;Curly&quot;), age=c(1,2)) Error in data.frame(id = 1:3, name = c(&quot;Moe&quot;, &quot;Larry&quot;, &quot;Curly&quot;), age = c(1, : arguments imply differing number of rows: 3, 2 This example is from the Team, Venables, and Smith (2022) book. Logical and Integer values You have also logical values that can be “TRUE”, “FALSE” or “NULL”. You create them with a vector command and then T, F or N without strings c(T,F,F,N). There are useful values for logical comparison between two variables (See vector operator). Integer values can also be created by adding the as.integer code on a numerical vector. By default numerical values are non integers in R. &gt; x &lt;- c(T,F,T,F,T,N) &gt; class(x) [1] &quot;logical&quot; &gt; y &lt;- 2000 &gt; 2022 &gt; class(y) [1] &quot;logical&quot; &gt; b &lt;- c(5, 6, 6, 8, 11) &gt; b_int &lt;- as.integer(b) #Integer will truncated toward zero non integral number and imaginary part of complex numbers will be discarded. &gt; class(b_int) [1] &quot;integer&quot; Table 1.1: Object mode maping in R (From Long and Teetor (2019)). Object Example Mode Number 3.1415 Numeric Vector of numbers c(2.7.182, 3.1415) Numeric Character string “Moe” Character Vector of character strings c(“Moe”, “Larry”, “Curly”) Character Factor factor(c(“NY”, “CA”, “IL”)) Numeric List list(“Moe”, “Larry”, “Curly”) List Data frame data.frame(x=1:3, y=c(“Moe”, “Larry”, “Curly”)) List Function print() Function Logical values c(T,F,F,F,T,T) Logical 1.5 RStudio Environment 1.5.1 Project When you are opening a new project create a new project in the tab File and then create an R script in new file in the tab File. Choose carefully your project folder because it will be more complicated to move it later on. Treeing The organization of the folder is also really important you can read this blog (https://www.inwt-statistics.com/read-blog/a-meaningful-file-structure-for-r-projects.html) about the organisation of a project folder and look the snapshot below 1.8. Figure 1.8: R project folder structure. You have several ways of controlling your folder location with getwd() and setting a new one with setwd(). The formula ./ will automatically call the project folder. Note that when your a calling any path into R you will need / and not \\ as commonly used in windows or other programming languages (Cf. Latex) 1.5.2 Saving the data For saving your working space you have two ways: Either export one by one your file to specific formats (.csv, .jpg, .shp….) as we will see later. Saving via a .RData the file is more easily readable on R. You can save only one or multiple elements save(list = c(\"x\",\"y\"), file = \"output.RData\") or all environment of your project save.image(file = \"output.RData\"). 1.6 Exercices Calculate the following equation with R and copy the code lines: \\[ x = (2*4-4)^2 + \\sqrt(9) \\] Solve the following equation rounded at 3 digits (if necessary) by using the quadratic formula: \\[ -5x^2 - 6x + 11 = 2 \\] For reminder the quadratic formula : \\[ ax^2 + bx + c = 0 \\] \\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\] Create 5 vectors (minimum length 3) from different classes. Name them after their class name and export them as a list in a .RData file named Exercise_R_01. Give the objects class, variable mode and number, and observation number of the data rock, trees and iris. These data are included in R basic package. See solution # Exercise 1 x &lt;- (2*4-4)^2+sqrt(9) x ## [1] 19 # Exercise 2 positive.x =(6+(sqrt((-6)^2-(4*(-5*9)))))/(2*-5) positive.x ## [1] -2.069694 negative.x =(6-(sqrt((-6)^2-(4*(-5*9)))))/(2*-5) negative.x ## [1] 0.8696938 # Exercise 4 str(rock) ## &#39;data.frame&#39;: 48 obs. of 4 variables: ## $ area : int 4990 7002 7558 7352 7943 7979 9333 8209 8393 6425 ... ## $ peri : num 2792 3893 3931 3869 3949 ... ## $ shape: num 0.0903 0.1486 0.1833 0.1171 0.1224 ... ## $ perm : num 6.3 6.3 6.3 6.3 17.1 17.1 17.1 17.1 119 119 ... str(trees) ## &#39;data.frame&#39;: 31 obs. of 3 variables: ## $ Girth : num 8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ... ## $ Height: num 70 65 63 72 81 83 66 75 80 75 ... ## $ Volume: num 10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ... str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 1.7 Additionnal Ressources Here you will find videos or links for additional material. Philosophy of R and free software https://www.youtube.com/watch?v=jk9S3RTAl38 : John Chambers interview on the R and S language philosophy and origin. https://www.youtube.com/watch?v=Ag1AKIl_2GM : Richard Stallman TEDx on the free softwares. John M. Chambers, “S, R and Data Science”, The R Journal, 12:1, 2020, pp. 462-476. Chamber, John M., Programming with Data: A Guide to the S Language, Springer, 1998. History of R language Becker, Richard A., A Brief History of S, Murray Hill, New Jersey: AT&amp;T Bell Laboratories, 2015. https://www.youtube.com/watch?v=Uey45MSg8Y4 : Peter Dalgaard conference on history of R in CeleBration 2020 in Copenhagen, 2020. https://www.youtube.com/watch?v=qWG_MLrxKps&amp;t :John Chambers talk about S, R and Data Science short history, 2021. Why R? https://www.youtube.com/watch?v=4lcwTGA7MZw&amp;t : Short presentation on R pros and cons compared to python. Giorgi, Frederico, Ceraolo Carmine, Mercatelli Daniele, “The R Language: An Engine for Bioinformatics and Data Science”, Life, 12, 648, 2022. Formation online Basic an quick online course (4 - 6 hours) : https://courses.cognitiveclass.ai/courses/course-v1:CognitiveClass+RP0101EN+v1/course/ More developed course about many uses of R (8 - 10 hours) : https://learning.edx.org/course/course-v1:HarvardX+PH125.1x+1T2022/home References "],["data-treatment-overview-analyse-and-programming-basics.html", "2 Data treatment, overview, analyse and programming basics 2.1 Data management 2.2 Vector operation 2.3 Export your data 2.4 Exercises", " 2 Data treatment, overview, analyse and programming basics 2.1 Data management In this part, we will see how to import data sets of various natures, clean them, organised them and show the essential info about them. These treatments will be possible with additional packages dplyr and tidyverse. 2.1.1 Load data If importing data seems simple in other software it can be more tricky under R. We will see here how to import more common data such as .txt, .csv or .excel. For the raster and shapefile data that we might use later see. Data cleaning R is a really powerful tool and you can perform any transformation, cleaning or import. BUT, R is time-consuming, even for senior users, for any kind of treatment. For beginners, it might take hours to find a solution to prepare your data set as wanted. Therefore, we will advise you to always prepare your data before in more “user friendly” software as Excel or Open office solution. Included data and folder scanning First, you can load data already included in the R environment and different packages. To do so you can check all data available with data() and then call them with data(name) and the data set will be loaded. If the Rstudio IDE with the Files windows give you an overview of your project folder and files you can do it manually via list.files() and even add the parameter path = \"foldername\" or pattern = \"\\\\.filetype\" to precise the folder location or the type of data you want to look at. .txt, .csv and .xlsx files For reading a .txt file saved in a delimited format (“,”, “;”, TAB …) you can use the read.delim(\"filename\") code with this additional parameters header = TRUE or FALSE if you have header. sep = \"x\" To choose your delimiter in you file, x can be \\t for tab, , for comma or ; for semicolon. You can also set your decimal separation with dec = \"x\". For reading a .csv file you will use the read.table(\"filename\")which is quite similar from read.delim. You have some other additional parameters such as na.strings = \"NA\" choosing what to put in the row with NA value (We strongly advise leaving it on NA). skip = ncan be used to skip a n number of lines before reading the data. And finally the .xlsx can be read via the read.xlsx code from the openxlsx package. It allows you to select one specific sheet in the file with the name of the sheet in the second position after the name of the file as read.xlsx(\"filename\", \"sheetname or sheetindex\"). there is some change in the structure of additional parameters as seen before. startRow = n defines the line where you begin to read the data, and sep.names = \"\" is for specifying the delimiter characters. &gt;data(iris) &gt; sample_data &lt;- read.delim(&quot;./Data/LUCAS-SOIL-2018.csv&quot;, header = TRUE, sep = &quot;;&quot;) &gt; sample_loc &lt;- read.table(&quot;./Data/Soil_sample_location.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) &gt; ls() [1] &quot;iris&quot; &quot;sample_data&quot; &quot;sample_loc&quot; 2.1.2 Overview of the data First, we will load our data that we will use during the class session within palmerpenguins packages. To load the data make install.packages(\"palmerpenguins\") then load the package with library(palmerpenguins) and load the data with data(penguins). You have 6 essential commands for having an overview of your data set : The most important is str() it will give you the class of the object and also its vectors with some of their data. The head() command will give you the columns names and the first lines of the data set. The tail() command will give you the columns names and the last lines of the data set. The ncol() command will give you the number of columns. The nrow() command will give you the number of rows in the data set. The summary() command will give you the basic statistical information about your data (mean, median…). 2.1.3 Select data You can select your data by column in two ways : By columns position df[n1] and if you want to select more df[c(n1, n2 ...)]. By columns name df[\"name\"] and if you want to select more df[c(\"name1\", \"name2\" ...)]. If you forget the c() it will give a specific row and column number. List and data frame selection For a list, you will need to put two [[]] for selection. For data frame, a better way for selecting a specific column is by using df$name command. You can also select a specific row with $ as in df[n1,] and df[c(n1,n2,...),] for multiple selections. 2.1.4 Remove or add data If you want to remove data from your data set you can either filter (see later) or just remove an entire row or column. For removing columns df[,-c(x1, x2...)] and for removing rows df[-c(x1, x2...),]. If you want to remove by name it is more complicated you have to use df[ , ! names(df) %in% c(\"name1\", \"name2\")] or the subset(df, select = - c(\"name1\", \"name2\")). You have also a more easy solution with the dplyr package. If you want to add new data to your data set you have two different ways : With the classical R function rbind(df1, df2) to add rows to your data and cbind(df1, df2) for adding columns. But be careful with this method you can also combine data sets with the same amount of columns for rbind()and rows for cbind() otherwise it will display an error message. The second way is more powerful, it is the merge(df1, df2, by =) function. The by = variable will be your columns name or if you want merge others columns then put the value by = \"row.names\". Then it will depend, if you want to keep all your data even the one with no measurement, you will have to add the parameter all = TRUE. Otherwise, if you want a cross result in order to already filter your data, you can leave it without this parameter (default is FALSE). NAs values Another important point is the NAs values which are missing values (Very very common !). You can spot them with is.na(df) which give you a list of binary answer, true and false to the question “is there a missing value inside this data set?”. You can also see how many NAs you have with the command sum(is.na(df) == TRUE). To treat this missing value you have two solutions. First, you can simply removed them with na.omit(df) but it will remove the related rows. You can remove all cells with NAs from one specific column with subset(df, !is.na(column)). Another solution is to replace these NAs values with a specific value. You can use this line of code df[is.na(df)] = x where x is a variable of the class of the column, it can be a number as 0, -9999 or a text, factor… You can do the same with the NULL variables with the is.null() function. You can also replace any values with replace(df, y, x) where y is the operator (see below) to be replaced and x is the value of a replacement. For example, replace(df, df &lt; 0, 0) will give zero value to all negative data. You can also replace it with any kind of value (eg. mean, median…). Careful for replacing a NAs value by the mean or any calculation on the variable column, you will need to remove and put aside the NAs from this column when doing it. Therefore, you have to use the na.rm = TRUE parameter after your calculation (mean(), min(), median(), max()…). 2.2 Vector operation Operators are very useful to filter or even to comparing data to each other and also for basic programming of function creation. Without any packages, R allows several vector operations listed below. Table 2.1: Operators in R. Operator Meaning == Is egal to? != Is not egal to? &gt; Grater than? &lt; Less than? &gt;= Greater than or equal to? &lt;= Less than or equal to? &amp; And | Or ! Not %in% Is found in? From the Tidyverse package the “pipe” system is often used to optimize your code. Instead of filtering several time, with different data sets, you can add the code %&gt;% to simplify your operator. 2.3 Export your data You can export your data set in many ways but the easiest is with the write.table(df, \"df.export\", dec = \"\", sep = \"\", row.names = , col.names = ) command. You have several parameters: the first one df is the name of your file inside the project while the \"df.export\" is the name you want to give to your file with its extension name (.txt. and .csv are the best choices). The dec = \"\" parameter will allow you to choose your delimiter for decimals number (either , or .), the sep = \"\" parameter will give the separator of your columns (; or , or tab with /t) and row.names = and col.names = are true or false parameters for keeping the columns names and row names inside your export. 2.4 Exercises Import and analyse the bodendaten_xy and bodendaten_no_xy files into Rstudio. Merge the two file into a bodendaten_final data frame (be careful of the missing link). Remove the cells with missing values. Put the texture classification (“Bodenart[…]”) as a factor. Fill the negative and over 100 values in the data set: By the mean (of the variable) for the negative values of Mg. By zero for the others negatives values in the data set. By 100 the “Gu_koernung” values that are over 100 (it is the texture percentage). Export the result inside a “Final_data.Rdata” and a “Final_data.csv” with tab delimiter and header names. See solution #1) bondendaten_no_xy &lt;- read.delim(&quot;./Data/bodendaten_no_xy.txt&quot;) library(readr) bondendaten_xy &lt;- read.csv(&quot;./Data/bodendaten_xy.csv&quot;, sep =&quot;;&quot;) # Other option bondendaten_xy &lt;- read.delim(&quot;./Data/bodendaten_xy.csv&quot;, sep =&quot;;&quot;) #2) str(bondendaten_no_xy) str(bondendaten_xy) # Check only the colnames colnames(bondendaten_no_xy) colnames(bondendaten_xy) bodendaten_final &lt;- merge(bondendaten_xy, bondendaten_no_xy, by = &quot;Id&quot;) #3) # Is there any missing values is.na(bodendaten_final) # Total missing values sum(is.na(bodendaten_final) == TRUE) #Remove the missing values bodendaten_final &lt;- na.omit(bodendaten_final) #4) bodendaten_final$Bodenart_ka4_koernung &lt;- as.factor(bodendaten_final$Bodenart_ka4_koernung) levels(bodendaten_final$Bodenart_ka4_koernung) #5) # By the mean for the &#39;Mg&#39; column values under 0 sum(bodendaten_final$Mg &lt; 0) bodendaten_final$Mg[bodendaten_final$Mg &lt; 0] &lt;- mean(bodendaten_final$Mg) # By zero for all other negative values sum(bodendaten_final &lt; 0) # We have to select only the numerical or integer column str(bodendaten_final) # Alternative way sapply(bodendaten_final, mode) # Columns 4 - 7 and 9 - 18 and 20 have numerical values sum(bodendaten_final[,c(4:7,9:18,20)] &lt; 0) # Replace in each columns of numercial values bodendaten_final[,c(4:7,9:18,20)][bodendaten_final[,c(4:7,9:18,20)] &lt; 0] &lt;- 0 sum(bodendaten_final[,c(4:7,9:18,20)] &lt; 0) # By 100 for the &quot;Gu_koernung&quot; column above 100 sum(bodendaten_final$Gu_koernung &gt; 100) bodendaten_final$Gu_koernung[bodendaten_final$Gu_koernung &gt; 100] &lt;- 100 # 6) write.table(bodendaten_final, &quot;./Final_data.csv&quot;, sep = &quot;\\t&quot;, col.names = TRUE) save(bodendaten_final, file = &quot;./Final_data.RData&quot;) "],["figures-and-graphics-basics.html", "3 Figures and graphics basics 3.1 Visualization with plots 3.2 All roads lead to Rome 3.3 Multiple plots in one figure 3.4 Plots file output", " 3 Figures and graphics basics file_location &lt;- &quot;C:/YourFolder/Data/soil_data.txt&quot; soil_data &lt;- read.table(file_location, header = TRUE) names(soil_data) ## [1] &quot;OBJECTID&quot; &quot;x&quot; &quot;y&quot; &quot;coarse&quot; &quot;clay&quot; &quot;silt&quot; ## [7] &quot;sand&quot; &quot;pH&quot; &quot;OC&quot; &quot;N&quot; &quot;P&quot; &quot;K&quot; ## [13] &quot;CEC&quot; &quot;pH_class&quot; .scroll-200 { max-height: 200px; overflow-y: auto; background-color: inherit; } str(soil_data) ## &#39;data.frame&#39;: 346 obs. of 14 variables: ## $ OBJECTID: int 1 2 3 4 5 6 7 8 9 10 ... ## $ x : num 789504 773300 773621 766972 765574 ... ## $ y : num 5318238 5334066 5308045 5360016 5311956 ... ## $ coarse : int 12 8 14 13 12 5 50 5 35 9 ... ## $ clay : int 21 23 22 17 18 17 22 19 21 33 ... ## $ silt : int 41 72 58 54 56 74 39 63 69 60 ... ## $ sand : int 38 5 20 28 27 9 39 18 10 7 ... ## $ pH : num 6.32 5.56 5.1 7.34 6.12 6.6 7.2 7.39 7.02 6.24 ... ## $ OC : num 17.8 18 27.7 12.5 31.5 ... ## $ N : num 1.8 1.8 2.5 1.4 3.2 ... ## $ P : num 20.1 60.6 15 27.6 24.1 55.6 49.3 84.2 76.6 54.4 ... ## $ K : num 126.8 234.3 70.1 17.6 68.1 ... ## $ CEC : num 12.6 10.4 8.3 12.7 18.7 12.9 36 16.5 22.5 27.5 ... ## $ pH_class: chr &quot;acidic&quot; &quot;acidic&quot; &quot;acidic&quot; &quot;neutral&quot; ... OBJECTID x y coarse clay silt sand pH OC N P K CEC pH_class 1 789503.5 5318238 12 21 41 38 6.32 17.8 1.8 20.1 126.8 12.6 acidic 2 773299.8 5334066 8 23 72 5 5.56 18.0 1.8 60.6 234.3 10.4 acidic 3 773620.8 5308045 14 22 58 20 5.10 27.7 2.5 15.0 70.1 8.3 acidic 4 766972.2 5360016 13 17 54 28 7.34 12.5 1.4 27.6 17.6 12.7 neutral 5 765574.1 5311956 12 18 56 27 6.12 31.5 3.2 24.1 68.1 18.7 acidic 6 763222.3 5339957 5 17 74 9 6.60 12.4 1.4 55.6 123.9 12.9 neutral 7 763674.4 5303926 50 22 39 39 7.20 103.3 7.7 49.3 111.9 36.0 neutral 8 759071.3 5351917 5 19 63 18 7.39 17.0 1.9 84.2 0.0 16.5 neutral 9 759246.5 5337908 35 21 69 10 7.02 36.1 3.8 76.6 74.0 22.5 neutral 10 759699.9 5301880 9 33 60 7 6.24 72.8 6.7 54.4 764.4 27.5 acidic 11 756896.7 5365899 27 21 38 42 6.15 19.1 1.7 68.1 241.7 10.8 acidic 12 754942.4 5361877 20 17 57 26 6.72 15.2 1.7 74.6 139.7 15.0 neutral 13 753585.4 5311848 23 14 56 30 7.54 30.7 3.0 72.7 107.9 21.3 alkaline 14 749375.0 5327783 33 17 45 38 5.44 17.4 1.8 44.7 96.5 7.8 acidic 15 747123.7 5347773 17 20 63 17 7.29 20.2 2.2 19.6 94.9 16.6 neutral 16 745452.8 5321736 47 28 42 30 6.89 57.1 5.4 17.9 87.9 31.4 neutral 17 741023.2 5355707 29 25 54 21 7.32 50.4 5.4 86.0 657.7 33.9 neutral 18 741425.8 5323691 9 8 39 53 7.43 11.1 1.2 0.0 132.1 9.5 neutral 19 737249.5 5337649 20 16 41 44 7.26 30.2 2.9 64.6 210.0 30.2 neutral 20 737530.0 5315635 16 18 52 30 7.03 38.0 3.7 35.2 191.7 20.7 neutral 21 735121.1 5347621 4 19 54 28 3.81 49.5 3.0 24.2 45.1 10.6 acidic 22 735350.4 5329623 19 19 47 34 6.85 40.4 4.7 86.6 187.4 19.4 neutral 23 733300.3 5333599 34 18 65 17 7.61 30.5 2.7 48.2 145.2 17.8 alkaline 24 733754.7 5297578 25 7 37 55 7.24 32.2 2.5 10.6 35.0 13.6 neutral 25 728897.7 5365571 14 22 52 26 6.80 15.8 1.7 42.1 106.4 16.4 neutral 26 729505.9 5317542 18 31 53 17 6.19 83.7 8.5 33.6 106.9 35.2 acidic 27 729805.0 5293528 23 41 45 15 6.39 41.1 4.0 15.5 116.8 24.4 acidic 28 725505.1 5317497 27 18 43 39 6.87 197.3 12.5 42.9 102.4 73.7 neutral 29 723759.1 5297460 19 31 56 13 7.13 68.9 6.6 65.1 125.3 40.8 neutral 30 719027.6 5355448 15 14 73 12 7.51 11.2 1.3 71.2 187.5 12.2 alkaline 31 719633.5 5307419 21 28 36 36 6.16 33.5 3.2 23.7 162.4 24.6 acidic 32 714798.8 5373406 4 22 69 9 7.44 12.3 1.4 59.3 313.3 17.5 neutral 33 713154.9 5345368 14 27 69 3 6.46 21.0 2.2 40.0 79.6 18.4 acidic 34 707370.6 5335263 28 22 45 33 7.84 28.3 2.7 73.6 324.7 24.1 alkaline 35 704857.7 5369280 24 22 44 35 7.52 33.8 3.4 79.2 88.8 27.5 alkaline 36 705765.8 5297246 17 26 57 18 5.23 45.7 4.3 41.1 116.6 13.5 acidic 37 700340.3 5409247 11 23 54 23 8.14 38.2 2.6 21.0 104.5 24.4 alkaline 38 700623.5 5387240 7 27 60 13 6.77 17.9 1.9 53.2 337.7 14.7 neutral 39 700957.7 5361230 3 40 53 7 7.65 63.4 5.7 15.5 92.9 55.3 alkaline 40 701084.6 5351227 10 28 60 12 7.58 68.1 5.5 51.1 117.0 50.9 alkaline 41 694472.1 5399168 19 6 11 84 5.58 6.2 0.7 73.9 100.5 3.5 acidic 42 694933.8 5363158 19 15 38 48 6.24 10.3 1.3 35.0 176.8 6.8 acidic 43 692830.7 5371134 12 13 41 46 6.61 15.0 1.6 59.1 190.7 8.1 neutral 44 690239.9 5417126 9 26 59 15 7.69 18.2 1.7 24.1 119.6 20.6 alkaline 45 690317.1 5411119 16 23 64 13 7.95 20.1 1.8 62.3 20.5 20.3 alkaline 46 690703.2 5381116 15 20 55 25 7.06 14.9 1.5 92.2 235.4 15.2 neutral 47 691163.3 5345102 42 19 39 42 7.56 37.7 3.7 37.8 366.6 25.1 alkaline 48 686111.6 5427077 8 23 68 8 7.01 16.9 1.8 90.9 387.1 15.1 neutral 49 686577.7 5391068 5 21 23 56 6.84 28.2 3.0 10.7 0.0 20.9 neutral 50 687674.8 5305036 7 33 39 28 6.96 54.4 5.6 33.1 218.5 34.5 neutral 51 685600.6 5311015 26 19 48 33 7.31 38.7 3.8 10.3 122.6 31.1 neutral 52 680372.4 5406996 5 17 48 34 6.33 12.3 1.5 52.0 184.0 8.5 acidic 53 680449.6 5400997 21 25 50 25 7.66 35.3 2.1 47.8 291.5 20.5 alkaline 54 680604.4 5388992 5 6 14 80 7.56 32.8 2.4 13.3 135.2 18.3 alkaline 55 680683.4 5382991 6 10 21 69 6.25 8.9 1.1 35.0 199.1 5.9 acidic 56 680914.2 5364990 5 18 62 20 5.72 11.6 1.2 40.1 146.4 9.2 acidic 57 681066.5 5352983 2 36 37 26 6.44 28.4 2.9 23.9 115.1 26.8 acidic 58 676710.0 5380941 14 13 45 43 5.54 13.4 1.6 31.9 120.7 8.2 acidic 59 676996.0 5358943 14 15 26 59 7.46 16.2 1.6 84.5 121.5 14.7 neutral 60 672246.2 5416900 18 30 49 21 7.89 32.3 2.2 98.2 425.6 23.6 alkaline 61 672323.6 5410899 4 15 31 54 7.16 13.0 1.3 53.4 399.8 10.0 neutral 62 673351.6 5330876 8 9 65 26 6.69 13.2 1.5 67.4 128.0 11.2 neutral 63 673875.4 5290858 11 16 52 32 7.40 44.2 4.2 13.4 168.4 36.6 neutral 64 669043.9 5354836 9 18 37 45 6.75 13.1 1.6 94.6 262.2 12.0 neutral 65 669097.6 5350835 0 18 28 53 6.02 47.3 4.1 40.0 102.3 21.6 acidic 66 664505.2 5396794 12 11 14 74 7.33 29.1 2.3 0.0 264.5 17.1 neutral 67 664637.5 5386795 1 7 10 82 5.97 73.8 5.8 23.7 373.3 29.0 acidic 68 665892.2 5288761 34 20 49 31 6.84 37.3 3.4 20.0 193.5 27.9 neutral 69 664070.1 5274732 21 62 38 1 6.69 113.5 9.8 11.3 192.6 63.8 neutral 70 658251.4 5416723 23 39 35 26 7.69 32.8 3.0 77.0 467.0 27.9 alkaline 71 657845.6 5292668 16 45 43 12 6.80 123.8 8.6 17.4 156.6 64.7 neutral 72 654331.6 5410671 11 23 61 16 6.54 12.6 1.4 53.2 147.2 13.9 neutral 73 650434.7 5404620 10 29 54 17 7.33 27.2 1.9 95.4 543.3 22.1 neutral 74 651339.4 5332605 16 27 53 20 6.79 32.2 3.2 50.6 57.4 22.3 neutral 75 651748.9 5300596 2 23 41 36 6.35 40.1 4.1 47.8 151.0 20.3 acidic 76 647675.0 5306549 0 36 49 16 5.67 63.2 5.4 0.0 99.7 28.5 acidic 77 641883.8 5290470 10 31 50 19 5.84 50.8 5.2 21.1 115.5 29.0 acidic 78 633763.7 5300372 3 17 61 22 6.84 53.5 5.7 13.5 166.6 32.5 neutral 79 779726.1 5458249 7 17 37 46 6.49 57.3 5.2 16.0 67.4 17.5 acidic 80 775645.8 5464203 10 16 35 48 6.35 15.6 1.6 76.6 543.1 10.1 acidic 81 771799.3 5452147 17 11 28 61 7.07 17.4 1.7 139.4 688.1 7.0 neutral 82 765772.8 5454076 17 13 27 59 6.27 21.0 1.9 74.5 482.4 9.2 acidic 83 761720.6 5458028 3 23 44 33 5.59 24.4 2.4 43.3 282.1 9.5 acidic 84 757460.7 5477988 8 20 36 44 7.20 15.8 1.6 65.7 414.3 14.6 neutral 85 753173.0 5499946 6 17 51 31 7.00 15.7 1.5 51.8 183.2 9.9 neutral 86 751899.5 5443901 24 21 38 41 6.18 29.5 2.5 14.6 213.3 13.6 acidic 87 747536.9 5471862 30 10 26 64 6.20 12.5 1.3 63.5 130.9 7.4 acidic 88 747820.6 5449854 27 8 24 69 5.37 9.3 1.0 147.3 280.6 6.5 acidic 89 748051.9 5431845 22 22 61 17 8.08 31.1 2.4 45.2 138.7 20.6 alkaline 90 744805.7 5527855 13 18 30 52 5.34 62.7 5.2 15.0 58.6 15.9 acidic 91 746127.0 5425818 5 38 46 16 7.26 54.2 5.2 22.9 196.4 38.1 neutral 92 738751.2 5531779 9 18 34 47 6.69 16.5 1.4 95.8 218.3 11.8 neutral 93 739118.4 5503778 9 15 32 53 5.96 30.7 2.4 17.2 138.3 10.9 acidic 94 739405.1 5481764 5 23 37 40 6.07 29.8 2.9 15.7 76.6 14.3 acidic 95 735325.8 5487720 9 13 29 58 7.07 12.6 1.3 45.5 194.3 13.9 neutral 96 735871.1 5445705 18 16 33 50 5.78 22.1 2.3 50.0 305.7 10.2 acidic 97 732802.2 5527702 19 15 34 51 5.46 32.0 2.7 69.0 71.0 7.6 acidic 98 733430.1 5479691 14 11 39 51 7.21 13.9 1.4 59.4 155.2 12.9 neutral 99 730934.1 5517675 12 11 32 57 5.24 15.2 1.7 38.9 79.2 10.3 acidic 100 731168.6 5499671 15 10 23 67 5.93 9.1 1.1 49.8 243.8 5.1 acidic 101 732103.6 5427645 22 24 70 6 7.36 16.6 1.8 54.0 665.6 18.8 neutral 102 729586.7 5467637 5 8 13 79 7.07 14.4 1.2 43.5 189.0 7.4 neutral 103 727746.0 5455610 19 51 42 7 5.60 48.9 4.4 0.0 99.5 20.8 acidic 104 727896.5 5443603 9 8 24 68 6.17 9.8 0.9 76.2 145.7 4.8 acidic 105 722052.4 5431527 5 20 49 31 7.25 12.9 1.4 48.8 167.8 14.2 neutral 106 717559.4 5469493 6 14 8 77 7.39 7.9 0.9 30.5 166.7 10.4 neutral 107 711117.0 5503418 5 11 15 73 5.49 23.8 1.8 41.2 42.9 8.8 acidic 108 708801.8 5527395 7 20 25 55 5.70 23.0 2.2 17.3 120.8 8.4 acidic 109 709976.3 5437380 8 36 53 11 7.50 20.5 2.0 49.4 308.9 22.8 alkaline 110 706774.9 5529370 8 44 45 12 7.61 33.7 3.2 20.4 203.5 24.6 alkaline 111 704958.2 5515346 3 7 18 75 6.17 10.3 1.1 51.8 90.1 7.5 acidic 112 703169.4 5499315 4 30 33 37 5.90 36.8 3.2 10.3 68.9 13.4 acidic 113 703404.7 5481313 4 18 67 16 7.12 11.3 1.2 25.0 209.6 10.2 neutral 114 701274.9 5491289 5 18 45 37 6.53 22.9 2.0 29.1 53.5 9.6 neutral 115 699924.5 5441255 11 24 68 8 6.49 21.7 2.1 82.1 289.9 16.9 acidic 116 695873.4 5445206 28 26 60 14 7.11 22.7 2.4 87.3 529.5 17.7 neutral 117 690960.2 5515165 8 17 41 42 5.35 23.5 2.2 0.0 45.5 4.7 acidic 118 690084.8 5429127 11 26 63 11 7.16 17.3 1.8 22.3 233.5 14.6 neutral 119 687434.2 5479110 9 22 66 12 7.91 12.7 1.4 25.7 210.2 16.0 alkaline 120 687668.7 5461108 23 21 67 12 6.38 15.2 1.6 50.9 193.3 12.2 acidic 121 685878.0 5445078 13 21 69 9 7.55 16.0 1.6 28.5 219.8 17.1 alkaline 122 683512.7 5473059 26 25 36 40 6.93 13.1 1.4 26.8 0.0 10.1 neutral 123 677699.3 5458981 3 8 6 85 5.97 25.2 2.3 27.6 118.6 7.7 acidic 124 673751.7 5454931 3 24 12 64 6.00 22.3 2.1 64.3 139.8 12.3 acidic 125 632496.6 5550407 5 23 39 38 7.38 14.6 1.6 24.4 247.1 15.4 neutral 126 620422.9 5556246 10 27 21 52 7.43 14.2 1.5 52.7 471.5 17.1 neutral 127 610587.0 5544117 2 52 32 16 8.12 18.8 1.8 78.4 537.9 25.5 alkaline 128 608534.3 5548089 13 31 58 11 7.09 30.8 3.0 14.1 145.2 25.5 neutral 129 606269.1 5568058 7 41 41 18 7.12 45.2 3.7 35.1 263.4 26.5 neutral 130 605018.0 5512044 7 17 31 52 7.15 11.0 1.1 42.7 254.1 11.8 neutral 131 600405.0 5557980 13 21 72 7 6.34 14.7 1.6 22.8 177.0 12.8 acidic 132 598565.7 5545956 9 13 48 39 6.91 14.6 1.6 23.8 151.1 11.2 neutral 133 596031.5 5585920 4 44 47 9 6.45 21.7 2.4 28.8 431.6 20.3 acidic 134 594246.2 5569895 29 30 66 4 7.53 16.9 1.7 27.7 233.2 20.5 alkaline 135 594676.1 5537907 8 25 25 50 7.71 14.8 1.6 23.2 524.4 16.1 alkaline 136 594967.4 5515911 3 17 27 56 6.18 21.0 2.2 11.3 56.7 12.9 acidic 137 590890.7 5521855 4 32 27 42 8.02 12.2 1.3 53.3 421.6 12.3 alkaline 138 591128.2 5503860 11 39 49 12 8.05 17.7 1.4 40.0 643.0 18.9 alkaline 139 589081.3 5507835 7 20 32 48 7.23 6.3 0.7 25.1 178.2 10.4 neutral 140 586544.7 5547797 11 21 74 5 6.85 10.2 1.3 41.6 259.1 12.5 neutral 141 583967.2 5591742 5 33 59 8 7.62 32.9 3.4 32.2 349.4 34.4 alkaline 142 584918.3 5519778 4 36 60 5 7.93 17.5 1.8 65.7 585.7 19.5 alkaline 143 582760.7 5531749 11 29 63 8 8.14 12.9 1.5 38.9 355.1 19.8 alkaline 144 580709.7 5535722 17 25 72 3 7.90 13.1 1.5 20.3 239.5 19.2 alkaline 145 577029.7 5511675 11 22 64 14 7.12 11.5 1.3 51.4 196.2 14.2 neutral 146 572551.0 5547611 27 24 62 15 6.90 38.0 3.0 35.7 356.5 26.0 neutral 147 570044.3 5585571 10 12 19 69 5.85 17.2 1.5 18.2 112.3 8.0 acidic 148 570267.7 5567576 11 13 42 45 6.61 9.6 1.1 29.0 143.5 6.0 neutral 149 569275.2 5493572 4 26 72 2 7.79 12.4 1.5 36.8 196.8 14.6 alkaline 150 566877.0 5523538 44 38 52 10 8.12 20.1 2.0 70.1 534.0 26.0 alkaline 151 567113.1 5505545 7 36 59 5 7.09 21.6 2.7 22.0 245.4 25.1 neutral 152 564420.8 5557500 14 16 47 37 7.39 24.2 2.3 17.9 279.1 14.2 neutral 153 562717.9 5535478 4 42 54 4 6.85 12.5 1.4 29.6 322.0 24.5 neutral 154 558799.2 5529428 12 7 14 79 7.75 8.4 0.8 30.0 65.8 8.4 alkaline 155 554079.1 5583355 5 18 42 40 5.36 24.6 2.4 19.2 247.2 5.4 acidic 156 554991.9 5515379 14 27 66 8 7.91 10.7 1.4 34.7 194.4 18.5 alkaline 157 552857.6 5525351 8 17 78 5 7.06 12.4 1.5 68.3 274.2 14.5 neutral 158 553024.3 5513351 23 33 63 4 7.45 16.6 1.7 37.0 365.6 21.2 neutral 159 519172.3 5502901 5 14 40 45 5.96 14.9 1.4 56.3 245.4 7.6 acidic 160 510618.5 5542815 10 15 27 58 6.31 14.0 1.4 48.1 248.0 8.0 acidic 161 508615.3 5544746 16 14 25 61 5.82 8.7 1.0 44.9 142.5 8.5 acidic 162 508892.7 5526799 3 17 67 15 6.62 8.4 1.1 22.6 107.8 10.4 neutral 163 718600.3 5545446 13 12 55 33 6.71 17.2 1.8 42.6 144.8 8.7 neutral 164 712460.6 5553452 17 21 41 38 5.89 25.0 2.1 70.0 208.3 9.3 acidic 165 710165.2 5575427 36 18 53 29 7.19 17.1 1.6 41.0 85.9 16.0 neutral 166 698377.9 5559270 20 16 33 51 5.18 30.5 2.4 11.4 48.7 7.3 acidic 167 690564.4 5545167 18 28 36 36 6.07 25.4 2.6 10.6 88.5 17.5 acidic 168 686724.1 5533114 7 14 20 66 6.06 10.4 1.1 0.0 62.2 8.3 acidic 169 678247.5 5569008 6 17 40 43 6.31 30.8 2.8 0.0 151.6 12.9 acidic 170 676698.8 5534984 10 28 52 21 5.13 27.8 2.8 0.0 91.6 14.1 acidic 171 674831.1 5524958 34 38 46 16 7.74 43.2 3.9 143.2 652.7 35.4 alkaline 172 670433.2 5554906 6 38 49 13 7.07 29.7 2.9 45.0 475.5 25.0 neutral 173 668727.3 5532878 19 27 57 16 7.65 29.4 2.8 108.5 406.7 24.3 alkaline 174 664330.0 5562825 9 19 70 11 6.13 13.5 1.4 41.2 201.0 12.6 acidic 175 663096.3 5504801 2 30 58 12 6.44 20.9 2.1 13.4 82.7 17.9 acidic 176 656650.9 5538721 19 37 51 11 7.60 18.9 1.9 19.0 271.3 23.1 alkaline 177 654332.3 5562693 5 14 41 45 6.86 15.4 1.5 35.5 116.4 12.1 neutral 178 654489.6 5550694 33 41 49 9 7.39 38.7 3.7 58.9 943.0 37.3 neutral 179 654811.6 5526698 12 40 45 15 7.78 36.6 3.2 71.6 747.8 32.0 alkaline 180 655043.8 5508700 8 33 30 38 7.95 15.3 1.8 34.0 295.9 17.6 alkaline 181 648280.5 5566615 18 47 46 7 7.49 32.0 3.1 64.1 609.8 29.9 neutral 182 644521.5 5548565 47 59 36 5 5.91 48.5 4.8 0.0 405.3 30.5 acidic 183 640709.2 5534517 12 19 29 52 7.46 19.1 2.0 22.2 155.6 14.7 neutral 184 638841.6 5524488 13 20 16 64 6.83 22.8 2.1 27.0 99.0 23.8 neutral 185 636733.6 5532461 21 68 23 9 6.35 61.2 6.1 12.0 150.9 39.0 acidic 186 634925.9 5518440 6 15 37 48 6.38 9.5 1.0 19.6 179.3 9.7 acidic 187 626634.6 5540329 4 11 21 69 5.90 13.9 1.5 10.4 62.3 8.1 acidic 188 622955.2 5516280 2 13 24 63 6.66 9.3 1.1 50.2 147.3 7.5 neutral 189 658950.5 5362713 8 21 31 48 7.05 18.9 2.0 59.0 226.6 15.1 neutral 190 656694.0 5382693 9 33 34 33 6.63 44.3 5.1 17.8 110.9 32.6 neutral 191 657081.0 5352686 9 21 51 28 7.48 24.4 2.1 16.0 108.7 19.5 neutral 192 651109.7 5350613 12 22 50 28 6.67 14.2 1.6 64.4 235.0 16.2 neutral 193 646828.4 5372566 4 13 26 61 6.05 10.3 1.3 60.9 224.0 17.9 acidic 194 644931.3 5364538 6 33 40 28 7.46 59.7 5.4 24.4 100.6 39.1 neutral 195 640727.4 5380492 9 21 32 47 7.38 49.3 4.9 62.3 117.1 29.6 neutral 196 638391.3 5406468 7 9 27 63 6.54 14.2 1.4 64.7 204.4 9.0 neutral 197 636573.8 5392446 47 20 44 37 8.08 40.3 1.9 59.6 162.5 18.7 alkaline 198 636891.3 5366442 4 11 24 65 6.50 10.5 1.3 59.9 198.2 7.6 acidic 199 634627.7 5388417 13 45 33 22 7.50 66.5 6.3 54.0 192.7 54.2 alkaline 200 635093.0 5352410 20 33 42 24 7.32 24.6 2.5 45.9 155.1 26.5 neutral 201 633302.5 5336385 10 21 72 7 6.61 9.2 1.1 30.0 157.4 8.9 neutral 202 633533.8 5318379 7 34 49 16 6.24 121.2 12.2 33.5 86.8 62.0 acidic 203 634042.9 5278365 12 29 41 30 6.35 37.5 3.9 0.0 85.4 20.8 acidic 204 631636.7 5310352 8 30 34 36 6.30 43.3 4.4 43.1 319.3 23.3 acidic 205 629996.9 5282319 4 27 56 17 7.12 55.8 5.7 21.8 119.8 31.7 neutral 206 627332.9 5334307 7 31 33 36 7.10 68.3 6.5 40.2 211.9 37.1 neutral 207 627794.9 5298297 29 28 44 28 7.04 69.4 6.5 67.5 217.0 33.1 neutral 208 623949.8 5286244 6 22 42 36 5.57 30.8 3.3 10.9 56.3 10.8 acidic 209 620167.6 5424238 7 43 31 26 7.82 20.1 2.2 23.6 710.4 28.2 alkaline 210 620404.2 5406237 12 36 50 14 7.19 32.3 3.3 19.1 173.9 30.8 neutral 211 620638.0 5388237 12 30 65 5 7.54 16.0 1.7 28.2 298.6 19.3 alkaline 212 621181.7 5346233 12 25 42 34 5.78 21.9 2.2 12.1 126.5 13.0 acidic 213 621413.6 5328231 7 23 31 46 5.66 32.9 2.7 14.9 42.1 12.9 acidic 214 618957.6 5362223 16 8 16 76 5.88 12.9 1.5 57.8 239.1 6.9 acidic 215 619620.3 5312201 15 25 61 14 6.39 22.1 2.3 12.8 182.3 12.9 acidic 216 619672.0 5308201 7 49 33 18 6.86 61.6 6.3 46.6 388.9 49.7 neutral 217 620082.2 5276192 24 28 52 20 7.17 55.8 5.7 31.6 74.8 28.2 neutral 218 617109.0 5352183 7 30 41 30 6.09 36.8 3.6 26.5 73.0 11.2 acidic 219 618032.4 5280167 21 14 53 32 6.54 42.0 4.1 0.0 72.0 22.5 neutral 220 614145.3 5426159 13 39 36 25 7.87 20.6 2.2 80.6 628.0 25.2 alkaline 221 614379.5 5408160 8 31 64 6 6.48 19.1 2.0 71.2 594.1 20.8 acidic 222 614615.6 5390161 1 31 58 11 6.04 24.4 2.3 13.2 123.8 18.6 acidic 223 614901.8 5368156 9 15 37 49 6.01 12.6 1.6 0.0 58.5 11.7 acidic 224 615032.0 5358161 6 30 52 17 6.22 21.6 2.4 39.4 121.1 17.8 acidic 225 615134.7 5350158 9 19 33 47 6.94 11.8 1.4 54.0 170.5 15.4 neutral 226 615265.6 5340157 4 16 33 51 5.65 24.2 2.7 12.6 73.3 8.6 acidic 227 613651.6 5310125 26 20 46 34 7.20 35.2 3.2 41.0 211.5 20.9 neutral 228 610771.0 5378107 14 26 46 29 7.67 61.1 5.4 46.4 126.6 54.6 alkaline 229 611781.2 5300099 29 19 54 27 7.28 59.4 5.1 35.9 194.7 34.0 neutral 230 609424.0 5328078 12 39 42 19 6.50 122.1 9.1 15.9 94.5 62.5 acidic 231 609887.2 5292070 10 17 51 32 7.16 55.0 5.3 45.6 239.2 28.9 neutral 232 607372.7 5332054 13 0 0 0 5.14 251.3 16.8 0.0 78.6 61.9 acidic 233 607786.2 5300048 6 25 46 29 5.85 37.8 4.0 24.3 93.6 15.0 acidic 234 606146.5 5272012 3 27 50 23 6.32 42.4 4.4 10.3 85.2 26.9 acidic 235 603582.9 5315999 10 30 34 36 6.30 35.7 3.5 18.7 178.1 22.6 acidic 236 603816.0 5297997 8 26 46 28 5.39 28.6 3.0 21.2 94.1 13.8 acidic 237 600973.9 5366005 9 22 55 23 7.10 18.2 1.9 61.8 495.1 17.3 neutral 238 601767.3 5301971 19 31 38 30 7.36 29.1 3.0 18.1 115.1 34.0 neutral 239 601997.0 5283966 26 30 43 27 6.45 90.7 8.1 44.5 134.5 47.8 acidic 240 599354.7 5333951 5 14 39 47 6.49 14.8 1.7 47.4 137.4 12.4 acidic 241 596628.3 5389928 4 18 28 54 7.95 14.7 1.5 30.7 275.8 15.0 alkaline 242 597382.0 5331926 8 23 50 28 6.46 26.1 2.7 33.6 387.6 15.2 acidic 243 597564.0 5317924 3 27 37 36 6.05 32.3 3.4 14.0 84.9 17.4 acidic 244 595668.8 5309896 4 35 33 32 5.95 38.8 3.9 37.3 231.0 23.6 acidic 245 596131.2 5273889 6 19 47 34 6.07 35.2 3.8 10.6 74.6 22.2 acidic 246 594082.5 5277863 21 20 46 34 7.38 37.8 3.2 0.0 71.4 25.9 neutral 247 591192.3 5345847 18 20 45 35 6.32 6.1 0.8 10.7 145.1 7.3 acidic 248 591826.2 5297843 4 25 41 34 5.54 28.7 3.1 0.0 75.8 13.6 acidic 249 588918.8 5367823 22 24 45 31 7.53 32.5 2.9 69.9 352.7 19.9 alkaline 250 589102.2 5353824 5 14 38 48 6.45 13.6 1.5 31.7 116.6 10.0 acidic 251 589802.7 5299817 9 21 34 45 5.53 29.4 2.8 41.0 196.4 12.6 acidic 252 590085.4 5277812 6 24 36 41 6.03 25.4 2.8 12.8 214.5 13.5 acidic 253 587467.5 5325796 11 15 60 25 6.08 11.2 1.3 64.0 200.6 9.7 acidic 254 587701.4 5307794 13 32 35 33 6.33 43.2 4.2 25.3 123.7 26.5 acidic 255 576980.3 5363668 14 33 47 20 7.47 22.6 2.7 29.3 336.1 27.4 neutral 256 574153.8 5273606 6 22 47 31 5.34 30.7 3.4 69.1 142.8 10.6 acidic 257 566189.3 5271503 16 26 42 32 5.67 49.1 4.8 27.2 95.2 18.8 acidic 258 560168.8 5273426 7 25 41 34 5.85 31.4 3.4 29.4 71.0 15.8 acidic 259 848381.1 5411014 23 11 28 62 6.36 17.8 1.3 12.2 46.0 7.1 acidic 260 840424.0 5406921 5 20 42 38 5.22 32.5 3.0 19.1 153.9 8.9 acidic 261 838498.1 5400889 38 4 27 69 4.73 27.3 1.4 36.8 88.7 4.4 acidic 262 830191.3 5424818 20 24 40 36 5.49 40.2 3.3 0.0 64.5 7.6 acidic 263 828515.6 5402761 7 12 27 61 5.27 17.9 1.5 80.9 145.3 8.7 acidic 264 826740.9 5380728 3 18 77 5 5.36 17.0 2.0 0.0 60.4 8.3 acidic 265 822412.6 5406711 20 8 15 76 5.79 21.9 2.2 28.5 145.2 7.0 acidic 266 822864.0 5370676 6 20 58 23 6.80 15.5 1.6 66.6 157.8 11.1 neutral 267 818233.3 5420675 11 18 37 45 5.67 26.9 2.5 28.9 64.0 7.4 acidic 268 816705.3 5382628 27 24 45 31 7.27 16.3 1.6 61.8 102.7 21.7 neutral 269 812859.8 5370547 13 12 38 50 6.08 14.9 1.8 65.4 246.8 8.8 acidic 270 812996.4 5360528 6 20 45 36 6.95 19.1 2.0 36.5 141.5 12.0 neutral 271 808400.9 5406547 5 21 73 6 6.38 23.6 2.5 28.1 386.7 10.0 acidic 272 804869.5 5370467 23 18 49 33 7.37 18.9 1.9 80.6 223.5 16.0 neutral 273 802478.3 5400470 5 13 36 51 7.55 33.1 1.8 54.2 145.7 12.9 alkaline 274 800660.1 5384422 4 18 47 35 7.00 10.8 1.3 40.4 276.1 10.3 neutral 275 801013.0 5366354 17 33 58 9 6.80 27.8 2.5 96.6 442.7 21.0 neutral 276 798245.9 5418439 8 15 29 56 4.37 32.4 3.1 16.4 62.4 4.5 acidic 277 798423.6 5404427 4 32 61 7 7.55 41.9 3.2 113.6 88.0 29.3 alkaline 278 798878.6 5368397 16 20 47 33 5.43 27.7 2.8 12.0 53.5 10.8 acidic 279 796373.0 5408407 11 18 41 42 7.55 28.8 2.2 39.8 129.3 15.7 alkaline 280 794550.6 5396423 11 24 70 6 7.94 9.0 1.0 45.2 119.2 16.8 alkaline 281 794750.8 5378335 7 17 53 30 5.78 12.5 1.4 49.7 210.4 6.7 acidic 282 784293.6 5414267 11 18 76 6 7.27 10.5 1.3 66.9 352.4 11.2 neutral 283 784909.1 5364222 14 20 53 27 5.63 17.3 1.8 15.5 91.9 9.1 acidic 284 778369.1 5408191 16 19 68 13 7.78 18.1 1.6 101.2 375.1 15.3 alkaline 285 774212.3 5420157 16 16 42 42 7.63 15.1 1.7 103.9 378.8 14.7 alkaline 286 774622.5 5384144 32 20 64 16 6.23 16.3 1.8 29.4 118.8 10.4 acidic 287 774899.2 5366121 16 16 56 27 6.40 16.2 1.7 54.3 241.1 10.7 acidic 288 772025.9 5434135 6 16 43 41 5.83 15.3 1.4 91.2 206.0 10.5 acidic 289 772505.3 5392106 9 29 54 17 7.90 21.2 1.9 50.9 381.3 22.9 alkaline 290 772850.0 5370093 13 15 36 49 5.71 13.0 1.5 15.8 65.1 8.0 acidic 291 770440.8 5402094 23 23 59 18 7.81 17.1 1.5 67.8 283.4 17.6 alkaline 292 770567.5 5390130 29 24 48 28 7.03 13.8 1.5 88.3 274.0 17.6 neutral 293 768578.6 5406123 13 30 62 8 7.68 17.7 1.9 89.2 313.7 22.7 alkaline 294 768797.3 5374050 21 32 47 21 6.55 20.2 2.1 64.8 321.1 22.3 neutral 295 760132.9 5425983 8 9 21 70 7.36 12.4 1.3 67.8 150.7 7.8 neutral 296 758157.4 5423962 4 14 61 25 7.38 45.1 3.1 15.9 56.8 21.6 neutral 297 758515.3 5395946 28 37 47 16 7.23 148.1 11.2 52.6 260.9 83.7 neutral 298 754333.2 5409896 6 19 61 20 6.94 13.5 1.4 78.7 384.1 12.2 neutral 299 754614.6 5387893 10 17 73 10 6.93 15.0 1.7 50.6 285.4 13.6 neutral 300 744998.1 5357759 8 18 40 42 7.17 21.3 2.2 68.9 64.1 18.1 neutral 301 740384.7 5405734 2 26 61 14 7.26 16.5 1.7 54.0 314.0 2.7 neutral 302 738436.8 5401710 8 29 60 10 7.37 18.9 1.9 42.3 235.3 18.9 neutral 303 736615.8 5387675 8 24 61 15 7.83 35.1 3.2 33.0 0.0 32.7 alkaline 304 734362.7 5407662 7 33 39 27 5.62 17.4 1.8 42.0 255.7 21.5 acidic 305 732822.5 5369684 2 30 46 24 6.61 11.9 1.4 38.2 202.9 16.1 neutral 306 728437.5 5401587 21 26 51 23 6.96 19.3 2.1 78.2 353.2 18.4 neutral 307 728593.1 5389584 26 26 64 10 7.77 14.8 1.7 73.5 344.9 18.3 alkaline 308 724132.0 5425551 17 29 31 40 7.09 12.9 1.5 50.2 16.6 17.6 neutral 309 720668.9 5383481 15 26 48 26 7.53 11.0 1.4 35.9 198.1 19.0 alkaline 310 718258.2 5415470 5 27 61 13 7.74 14.5 1.4 72.6 334.2 18.2 alkaline 311 714389.3 5405419 2 24 61 15 7.65 13.8 1.5 57.3 218.9 19.0 alkaline 312 714567.8 5391413 8 21 64 15 7.56 17.6 1.8 90.8 231.9 17.4 alkaline 313 710259.3 5415358 9 22 40 38 7.51 10.9 1.2 67.5 203.5 15.1 alkaline 314 679435.2 5479005 35 27 60 13 6.25 25.2 2.5 10.3 0.0 14.3 acidic 315 667413.9 5480857 13 41 29 30 5.73 44.0 4.2 17.5 133.2 26.1 acidic 316 667830.4 5448853 3 32 27 41 7.21 22.0 2.1 64.5 583.4 22.2 neutral 317 661991.6 5436765 11 36 56 8 7.15 18.7 2.0 83.7 614.5 21.1 neutral 318 655285.1 5490700 6 4 9 86 5.63 7.8 0.7 45.7 82.7 5.1 acidic 319 655914.0 5442699 17 25 58 17 7.01 13.6 1.4 28.1 183.2 12.5 neutral 320 649942.5 5440626 6 38 48 14 6.40 26.3 2.7 37.4 257.7 21.5 acidic 321 644155.2 5424548 6 22 68 10 5.92 16.3 1.7 55.8 191.1 10.4 acidic 322 640078.4 5430493 6 49 45 6 7.72 19.8 2.1 0.0 264.4 24.0 alkaline 323 637333.6 5486472 4 17 41 42 6.92 13.8 1.3 54.1 265.3 9.9 neutral 324 637448.9 5478465 8 18 28 53 6.39 19.3 2.0 21.2 47.7 11.2 acidic 325 638188.8 5424477 12 27 68 5 5.86 19.2 2.2 21.6 80.6 13.6 acidic 326 635792.1 5452444 8 10 26 64 5.36 9.4 0.8 95.6 116.5 2.9 acidic 327 631951.7 5440391 12 43 30 27 7.41 26.8 2.4 34.3 346.0 21.5 neutral 328 629056.9 5508361 3 24 47 29 6.71 11.0 1.2 16.1 246.6 11.7 neutral 329 630005.1 5436366 17 30 53 17 5.90 16.7 1.9 15.6 146.0 14.2 acidic 330 627666.1 5462337 8 18 36 46 6.68 34.6 3.5 45.7 106.0 21.9 neutral 331 625455.2 5478313 13 25 25 51 6.91 38.1 3.7 24.1 148.7 24.5 neutral 332 625535.5 5472313 3 9 24 67 7.14 13.6 1.7 63.8 388.3 9.4 neutral 333 625771.4 5454315 7 11 26 63 7.49 6.0 0.7 60.5 198.0 9.0 neutral 334 626008.8 5436316 6 41 48 11 6.50 30.8 2.9 0.0 156.4 24.9 acidic 335 617326.8 5488205 6 22 22 56 6.01 13.8 1.4 28.3 126.7 10.4 acidic 336 615225.9 5496179 13 31 34 36 7.45 28.0 2.9 27.6 133.5 23.9 neutral 337 611225.1 5496124 8 9 24 68 7.60 11.7 1.4 101.4 232.3 12.3 alkaline 338 607545.4 5472076 5 13 37 50 6.24 12.5 1.5 64.9 308.4 9.2 acidic 339 605729.7 5458054 12 74 23 3 6.50 53.3 5.9 0.0 269.8 54.8 acidic 340 599414.6 5481971 26 42 53 5 7.12 45.2 4.5 28.0 258.2 37.6 neutral 341 599577.1 5469973 13 23 35 42 7.05 14.5 1.5 32.9 263.9 13.7 neutral 342 595869.6 5447893 3 20 45 35 7.46 10.1 1.1 19.3 120.8 13.0 neutral 343 591368.8 5485864 3 19 74 7 7.91 11.4 1.4 26.3 161.7 16.0 alkaline 344 585398.3 5483786 12 34 47 18 7.73 16.8 1.8 46.6 328.1 22.8 alkaline 345 583374.3 5485761 12 38 58 4 7.50 37.3 3.5 13.3 185.8 40.7 alkaline 346 581586.1 5469739 0 36 53 11 7.30 29.4 3.0 15.2 527.2 24.8 neutral 3.1 Visualization with plots The R Graph Gallery # We separate only two properties to make easier to work with them pH &lt;- soil_data$pH OC &lt;- soil_data$OC N &lt;- soil_data$N # We also create a data.frame with those 3 variables (only for easy handling) data &lt;- as.data.frame(cbind(pH, OC, N)) 3.1.1 Boxplots boxplot() boxplot(pH, N, names = c(&quot;pH value&quot;, &quot;N [%]&quot;), ylab = &quot;pH in water and N&quot;) Data to be displayed: pH and Corg. Labeling of the x-axis: names = c(\"pH value\", \"N [%]\"). Labeling of the y-axis: ylab = \"pH in water and N\". What does the boxplot show? 3.1.2 Histograms hist() hist(pH, xlab = &quot;pH value&quot;, ylab = &quot;Frequency&quot;, main = &quot;&quot; ) 3.1.3 Density plots plot(density()) plot(density(pH), xlab = &quot;pH value&quot;, ylab = &quot;Frequency&quot;, main = &quot;&quot; ) 3.1.4 Scatterplots plot(x, y) plot(N, OC, xlab = &quot;OC [%]&quot;, ylab = &quot;N [%]&quot; ) 3.1.5 Design options Directly in the graphic routines (help with ?par) Set colors with col = ... Set symbol properties with pch = ..., sizes with cex = ... Set title with main = ..., axis label with xlab = ..., ylab = ... Set drawing area with xlim = ..., ylim = ... After drawing a graphic Complete lines and points with lines(...) or points(...) respectively. Add captions (texts) with text(...) or mtext(...) Complete titles with title(...) Complete legend with legend(...) Output adjustment main Title of the diagram xlab labeling of the x-axis ylab labeling of the y-axis breaks frequency classes number of bars col color filling of the bars cex gradual scaling of text size hist(pH, xlab = &quot;pH value&quot;, ylab = &quot;Frequency&quot;, main = &quot;&quot;, breaks = seq(3.5, 8.5, 0.125), col = &quot;red&quot;, cex = 0.5 ) 3.2 All roads lead to Rome When working with code, it is very common that there are several ways to solve the same problem. Exercise: Create boxplots and histograms for clay content and P. Create a density of CEC distribution. Plot the correlations between clay content and OC. And now for the frequency distribution of pH_class, create one of the next plots. In the variable pH_class, pH is classified as: neutral: 6.5 to 7.5 alkaline: over 7.5 acidic: less than 6.5 Hint: The three different version are made with a barplot(), plot() and hist() You do need to remember the importance of factors transformation. 3.2.1 Variant A 3.2.2 Variant B 3.2.3 Variant C 3.2.3.1 Solution See solution # Variant A barplot(pH_class_count$Freq, space = 0, names = pH_class_count$Var1, xlab = &quot;pH class&quot;, ylab = &quot;Frequency&quot;, main = &quot;Frequency diagram of pH classes&quot;) # Variant B plot(factor(soil_data$pH_class), xlab = &quot;pH class&quot;, ylab = &quot;Frequency&quot;, main = &quot;Frequency diagram of pH classes&quot;) # Variant C hist(as.numeric(factor(soil_data$pH_class)), breaks = c(0, 1, 2, 3), freq = TRUE, xaxt = &quot;n&quot;, xlab = &quot;pH class&quot;, ylab = &quot;Frequency&quot;, main = &quot;Frequency diagram of pH classes&quot;) axis(side = 1, at = seq(0.5, 2.5, 1), labels = c(&quot;acidic&quot;, &quot;alkaline&quot;, &quot;neutral&quot;)) 3.3 Multiple plots in one figure When you set graphical parameters in Rstudio using this method, it is important to set the properties, plot the figures and reset the properties to the way they were before. Otherwise, every time we plot something, it will follow the set parameters. par( # set or query graphical parameters mfrow = c(1, 3), # 1 x 3 pictures on one plot, equivalent to mfcol = c(3, 1) mar = c(5.1, 4.1, 4.1, 2.1), # margins as c(bottom, left, top, right) oma = c(0, 0, 0, 0), # outer margins in lines of text as c(bottom, left, top, right) mgp = c(3, .1, 0), # margins line for axis title, axis label and axis line las = 0, # label axis style cex.lab = 1, # size of the labels cex.axis = 1, # size of the axis annotation xpd = FALSE # If FALSE, all plotting is clipped to the plot region, if TRUE, all plotting is clipped to the figure region, and if NA, all plotting is clipped to the device region. ) dev.off() # reset the original parameters plot(…); plot(…); plot(…) par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1), oma = c(0, 0, 0, 0), mgp = c(3, 1, 0), las = 0, cex.lab = 1, cex.axis = 1, ) 3.4 Plots file output In R it is possible to export images in the most common formats. The output format must be specified and the file will be generated by default in our working directory. tiff(&quot;filename.jpg&quot;, width = 21, height = 8, units = &quot;cm&quot;, res = 300) par(…) plot(…); plot(…); plot(…) par(…) dev.off() Plot export can be done in most of the image formats. E.g. .png, .jpg, .svg, .pdf. "],["statistical-evaluation.html", "4 Statistical evaluation 4.1 Descriptive statistics 4.2 Correlation 4.3 Linear regression lm() 4.4 Coefficient of determination with Pearson correlation coefficient cor() 4.5 root mean squared error (RMSE) 4.6 Function for the root mean squared error (RMSE)", " 4 Statistical evaluation When we work with data, is important to describe our data to understand it better. There are a wide variety of statistics used to describe or summarize data in terms of central tendency, shape, position, etc. # file location file_location &lt;- &quot;C:/YourFolder/Data/soil_data.txt&quot; soil_data &lt;- read.table(file_location, header = TRUE) # We separate only two properties to make easier to work with them pH &lt;- soil_data$pH OC &lt;- soil_data$OC N &lt;- soil_data$N # and we also create a data.frame with those 3 variables (only for easy handling) data &lt;- as.data.frame(cbind(pH, OC, N)) 4.1 Descriptive statistics mean(pH) ## [1] 6.738237 median(pH) ## [1] 6.85 min(pH) ## [1] 3.81 max(pH) ## [1] 8.14 range(pH) ## [1] 3.81 8.14 sd(pH) ## [1] 0.7908862 quantile(pH) ## 0% 25% 50% 75% 100% ## 3.8100 6.1625 6.8500 7.3800 8.1400 summary(pH) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 3.810 6.162 6.850 6.738 7.380 8.140 # For factors, is interesting to describe how many observations belong to each category pH_class_count &lt;- as.data.frame(table(soil_data$pH_class)) pH_class_count ## Var1 Freq ## 1 acidic 140 ## 2 alkaline 67 ## 3 neutral 139 Some functions as the ‘skewness’ command are not included in base R, but implemented via packages. E.g. moments library(moments) skewness(pH) ## [1] -0.4164928 Skewness indicates if our data distribution is symmetric or not: kurtosis(pH) ## [1] 2.619499 ‘kurtosis’ describe is how long is the tail of our data distribution: 4.2 Correlation Pearson correlation coefficient cor() \\[{r_{xy}=\\frac{\\sum_{i = 1}^{n}(x_i-\\overline{x})(y_{i}-\\overline{y})}{\\sqrt{\\sum_{i = 1}^{n}(x_{i}-\\overline{x})^2}{\\sqrt{\\sum_{i = 1}^{n}(y_{i}-\\overline{y})^2}}}}\\] where: \\(n\\) is sample size \\(X_{i}\\), \\(Y_{i}\\) are the individual sample points indexed with \\(i\\) \\(\\overline{x} = \\frac{1}{n}\\sum_{x = 1}^{n} x_{i}\\) (the sample mean); and analogously for \\({\\bar {y}}\\) Examples: So now with our data… cor(OC, N) ## [1] 0.9705 Attention correlation does not mean direct link between two event be careful with the interpretation. Spurious correlations 4.3 Linear regression lm() In R, the linear models are written as lm(y ~ x, data) Example: linearModel &lt;- lm(OC ~ N , data = data) summary(linearModel) ## ## Call: ## lm(formula = OC ~ N, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -27.003 -2.030 -0.056 1.587 45.320 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -5.4002 0.5552 -9.726 &lt;2e-16 *** ## N 12.5904 0.1686 74.658 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.997 on 344 degrees of freedom ## Multiple R-squared: 0.9419, Adjusted R-squared: 0.9417 ## F-statistic: 5574 on 1 and 344 DF, p-value: &lt; 2.2e-16 Some more functions for the curious ones plot(linearModel) When running this command, we obtain a set of 4 plots that are out of the scope of this “introduction”, but: Residuals vs Fitted : The residuals are distributed following a systematic pattern around the value 0, indicating that the linear regression is not the best. The residuals are also more concentrated in the center, while towards the extremes they show less dispersion, which could indicate heterogeneity among the error variances (heteroscedasticity). Some residuals stand out, indicating the possible presence of outliers. Normal Q-Q: It compares a theoretical normal distribution with the residuals of our model. It should show a straight line for normality assumption and should not show systematic pasterns (should be randomly distributed around that straight line). Scale-location: it shows if residuals are spread equally along the ranges of predictors. This is how you can check the assumption of equal variance (homoscedasticity). It’s good if you see a horizontal line with equally (randomly) spread points. Residuals vs leverage: Unlike the other plots, this time the patterns are not relevant. We look for outlying values in the upper or lower right corner. These places are where cases with a large weight in the linear regression can be located. Look for cases outside the dotted lines, which means they have high Cook’s distance values. This is just a visual check, not an air-tight proof, so it is somewhat subjective. But it allows us to see at-a-glance if our assumption is plausible, and if not, how the assumption is violated and what data points contribute to the violation. Source: Understanding Diagnostic Plots for Linear Regression Analysis 4.4 Coefficient of determination with Pearson correlation coefficient cor() \\[R^2≡1-\\frac{\\sum(y_{i}-\\hat{y_{i}})^2}{\\sum(y_{i}-\\overline{y})^2}\\] \\[R^2=r×r\\] cor(OC, linearModel$fitted.values) * cor(OC, linearModel$fitted.values) ## [1] 0.9418703 4.5 root mean squared error (RMSE) \\[RMSE=\\sqrt{\\frac{1}{n}\\sum_{i = 1}^{n}{(\\hat{y_{i}}-y_{i})^2}}\\] sqrt(1 / length(rbind(linearModel$residuals)) * sum(rbind(linearModel$residuals) ^ 2)) ## [1] 5.980082 4.6 Function for the root mean squared error (RMSE) Base R does not include a function for RMSE in base R, but we can create custom functions as follows: function_name &lt;- function(input_x, input_y, ...) { some_operations } Let's create our own RMSE function: rmse &lt;- function(x, y) { sqrt(mean((x - y) ^ 2)) } Requires input rmse(linearModel$fitted.values, OC) ## [1] 5.980082 "],["spatial-modeling.html", "5 Spatial modeling 5.1 Interpolation 5.2 Feature extraction 5.3 Work with vector data", " 5 Spatial modeling Let’s start to explore the data with the tools we already know. In this case, we will use the variable clay as example. soil_data &lt;- read.table(&quot;./Data/soil_data.txt&quot;, header = TRUE) plot(soil_data$x, soil_data$y, cex=soil_data$clay*0.05) We can produce a similar result with more specialized packages as sp # install.packages(&quot;sp&quot;) library(sp) # lets make a copy to use the raw data later soil_data_sp &lt;- soil_data # We can transform the data as spatial coordinates(soil_data_sp) = ~x + y class(soil_data_sp) ## [1] &quot;SpatialPointsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; # Plot the spatial data frame bubble(soil_data_sp,&quot;clay&quot;) Model: Limited representation of reality Spatial modeling: Image of states or processes of locatable objects and their characteristic values Data for spatial modeling: Position in space (e.g. xy-coordinate) Attributes/properties (e.g. sand content, carbon content, N, P, K, etc.) 5.1 Interpolation We want to interpolate data to fill the gaps where we do not have observations, the way to do this is creating and empty raster and then filling it with the new data. # install.packages(gstat) library(gstat) # Determination of the extension (xmin, xmax, ymin, ymax) xmin &lt;- min(soil_data$x) - 100 xmax &lt;- max(soil_data$x) + 100 ymin &lt;- min(soil_data$y) - 100 ymax &lt;- max(soil_data$y) + 100 **Be careful with the variable cellsize, it determines how many calculations we will do to populate it. # Determination of the resolution (cellsize) cellsize = 5000 # Spanning a grid (raster format) for interpolation grd &lt;- expand.grid(x=seq(from = xmin, to = xmax, by = cellsize), y=seq(from = ymin, to = ymax, by = cellsize)) coordinates(grd) &lt;- ~ x+y gridded(grd) &lt;- TRUE 5.1.1 IDW Inverse distance weighted (IDW) interpolation explicitly makes the assumption that things that are close to one another are more alike than those that are farther apart. To predict a value for any unmeasured location, IDW uses the measured values surrounding the prediction location. The measured values closest to the prediction location have more influence on the predicted value than those farther away. IDW assumes that each measured point has a local influence that diminishes with distance. It gives greater weights to points closest to the prediction location, and the weights diminish as a function of distance, hence the name inverse distance weighted. Inverse distance weighted (IDW) interpolation determines cell values using a linearly weighted combination of a set of sample points. source: How IDW works Gstat library has for this the function dataset.idw &lt;- idw(soil_data$clay ~ 1, location = ~x+y, soil_data, grd) ## [inverse distance weighted interpolation] image(dataset.idw[&quot;var1.pred&quot;], col=topo.colors(20)) points(soil_data$x, soil_data$y) title(&quot;IDW Interpolation of clay content&quot;) 5.1.2 Kriging Kriging is an advanced geostatistical procedure that generates an estimated surface from a scattered set of points with z-values. Kriging is based on statistical models that include autocorrelation—that is, the statistical relationships among the measured points. Because of this, it not only have the capability of producing a prediction surface but also provide some measure of the certainty or accuracy of the predictions. Kriging assumes that the distance or direction between sample points reflects a spatial correlation that can be used to explain variation in the surface. The Kriging tool fits a mathematical function to a specified number of points, or all points within a specified radius, to determine the output value for each location. Kriging is a multistep process: exploratory statistical analysis of the data, variogram modeling, creating the surface, and (optionally) exploring a variance surface source: How Kriging works # Variogram v &lt;- variogram(clay ~ 1, locations = ~ x + y, data = soil_data, width = cellsize) plot(v) # Variogram fit v.fit &lt;- fit.variogram(v, fit.method = TRUE, model = vgm(100, &quot;Sph&quot;, 50000, 60)) # Output of the variogram plot(v, model = v.fit) 5.1.2.1 Applying the model fit with the krige() function. # ordinary kriging: z &lt;- krige(formula = clay ~ 1, locations = ~ x + y, data = soil_data, newdata = grd, model = v.fit, nmax = 500) ## [using ordinary kriging] image(z, col = topo.colors(20)) points(soil_data$x, soil_data$y) title(&quot;Ordinary kriging Interpolation of clay content&quot;) # simple kriging: y &lt;- krige(clay ~ 1, locations = ~ x + y, data = soil_data, newdata = grd, model = v.fit, nmax = 500, beta = mean(soil_data$clay)) ## [using simple kriging] image(y, col = topo.colors(20)) points(soil_data$x, soil_data$y) title(&quot;Simple kriging Interpolation of clay content&quot;) Exercise: Tests Simple Kriging in addition to Ordinary Kriging, Differences theoretically and in visual evaluation? Interpolate OC of the soil_data.txt using ordinary kriging What model did you use? What sill? What range? What nugget? 5.1.2.2 Model validation To validate the data, is a good idea to separate the data in train and test data. But… In how many parts should I divide the data? Which of those divisions should I use? An easy way to solve this is using k-fold-cross-validation, in this case, we will use 10-fold x &lt;- krige.cv(clay ~ 1, locations = ~ x+y, data = soil_data, nfold = 10) cor(x$observed, x$var1.pred) * cor(x$observed, x$var1.pred) # Rsquared ## [1] 0.04239492 sqr_error &lt;- (x$var1.pred - x$observed )^2 sqrt(sum(sqr_error)/length(sqr_error)) # RMSE ## [1] 10.29546 5.2 Feature extraction We can also extract data to our points for some already existing raster # install.packages(&quot;raster&quot;) library(raster) # Load a raster stack from an external files terrain.lst &lt;- list.files(&quot;./data/Example_Germany/SAGA&quot;, pattern=&quot;\\\\.sdat$&quot;, full.names = TRUE) terrain.raster = raster::stack(terrain.lst) # plot to see SAGA is working well plot(terrain.raster$DEM) plot(terrain.raster) # set projection of the data points (transformed to spatial object) proj4string(soil_data_sp) &lt;- CRS(&quot;+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs&quot;) # plot the point on the raster plot(terrain.raster$DEM, main = &quot;DEM + Sample Points&quot;) plot(soil_data_sp, add = TRUE, pch = 1) # extract values terrain_cov = raster::extract(terrain.raster, soil_data_sp, method = &#39;simple&#39;) # combing the covariates + soil data cov_soil = cbind(data.frame(terrain_cov), ID = soil_data_sp$OBJECTID) # inspect the covariates + soil data str(cov_soil) ## &#39;data.frame&#39;: 346 obs. of 16 variables: ## $ Aspect : num 0.429 6.025 6.283 0.501 1.102 ... ## $ Catchment.Slope : num 0.0403 0.0149 0.0315 0.0234 0.0269 ... ## $ Channel.Network.Base.Level: num 399 430 589 409 535 ... ## $ Channel.Network.Distance : num 39.86 62.44 13.16 62.79 7.74 ... ## $ Convergence.Index : num 8.07 -7.47 -3.48 17.59 6.92 ... ## $ DEM : num 439 493 602 471 537 ... ## $ LS.Factor : num 2.032 0.792 2.588 1.472 0.484 ... ## $ Modified.Catchment.Area : num 7135383 14158001 4765989 5804979 13978788 ... ## $ Plan.Curvature : num 9.09e-06 -4.76e-06 1.50e-07 1.17e-05 5.02e-06 ... ## $ Profile.Curvature : num 1.53e-05 1.49e-06 -5.98e-06 1.24e-06 -4.28e-06 ... ## $ Relative.Slope.Position : num 0.03068 0.05149 0.0116 0.053 0.00666 ... ## $ Slope : num 0.04671 0.01737 0.01944 0.02425 0.00935 ... ## $ Topographic.Wetness.Index : num 9.21 11.06 13.54 11.19 12.46 ... ## $ Total.Catchment.Area : num 309775 673476 7381662 1190722 1618878 ... ## $ Valley.Depth : num 1260 1150 1122 1122 1155 ... ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... Aspect Catchment.Slope Channel.Network.Base.Level Channel.Network.Distance Convergence.Index DEM LS.Factor Modified.Catchment.Area Plan.Curvature Profile.Curvature Relative.Slope.Position Slope Topographic.Wetness.Index Total.Catchment.Area Valley.Depth ID 0.4294031 0.0403004 399.1916 39.8607788 8.0702753 439.0524 2.0323753 7135383 9.10e-06 0.0000153 0.0306755 0.0467074 9.210298 3.097750e+05 1259.5742 1 6.0251021 0.0148807 430.4036 62.4364319 -7.4680462 492.8400 0.7922727 14158001 -4.80e-06 0.0000015 0.0514949 0.0173740 11.057698 6.734757e+05 1150.0422 2 6.2830095 0.0314850 589.4273 13.1578979 -3.4751248 602.3657 2.5878420 4765989 1.00e-07 -0.0000060 0.0115953 0.0194362 13.540216 7.381662e+06 1121.6007 3 0.5011653 0.0234480 408.5652 62.7922974 17.5941334 471.3575 1.4717088 5804979 1.17e-05 0.0000012 0.0529975 0.0242488 11.189030 1.190722e+06 1122.0229 4 1.1021508 0.0268809 534.5034 7.7376099 6.9179778 537.1065 0.4840871 13978788 5.00e-06 -0.0000043 0.0066573 0.0093498 12.459466 1.618878e+06 1154.5442 5 6.1787410 0.0085865 413.6719 52.1421204 15.2397661 465.8141 0.1153976 18593388 8.10e-06 0.0000021 0.0430102 0.0034977 13.053521 8.969104e+05 1160.1765 6 1.5702554 0.0115924 524.0745 0.0000000 -20.8493633 518.6011 0.1907610 13070727 -9.20e-06 -0.0000160 0.0000000 0.0063188 11.796611 4.198033e+05 1194.5505 7 0.0219634 0.0044136 403.9760 3.9115295 -56.5708809 407.8875 0.1198936 23013878 -6.30e-06 -0.0000059 0.0032597 0.0024526 14.657634 2.908450e+06 1196.0389 8 2.9659510 0.0194990 419.6031 67.5102539 -12.2554197 487.1133 0.6217782 21073264 -1.60e-06 0.0000034 0.0558615 0.0180725 10.284395 3.066954e+05 1141.0183 9 6.2831855 0.0352127 524.0759 0.0000000 -2.5789902 518.5703 0.0000493 14481057 -1.50e-06 -0.0000100 0.0000000 0.0000020 19.155371 1.042419e+08 1191.9161 10 4.0093184 0.0060658 421.4517 86.6167603 1.1484684 508.0685 0.1281908 6967646 -1.50e-06 0.0000047 0.0745009 0.0060658 10.976505 2.500000e+05 1076.0103 11 4.2115779 0.0248918 422.4179 80.1736145 -11.2577705 502.5915 0.8086568 5553020 2.00e-07 0.0000033 0.0687277 0.0246467 9.622850 2.527281e+05 1086.3665 12 5.6866570 0.0113736 522.6282 11.1656494 -39.8165398 532.0483 0.2205232 9518352 -7.70e-06 -0.0000008 0.0096513 0.0056647 12.623464 1.194467e+06 1145.7350 13 5.1019182 0.0301106 464.3504 100.1460876 -14.4570904 564.4965 2.2024078 7363513 -1.12e-05 0.0000024 0.0850035 0.0434108 9.722178 4.728093e+05 1077.9946 14 6.2299914 0.0195076 419.4833 75.0160217 5.0001016 494.4993 0.7321568 12600115 1.38e-05 0.0000149 0.0631425 0.0195741 10.353709 3.229835e+05 1113.0269 15 1.6470327 0.0326655 485.6871 9.7435608 5.1283569 494.5802 2.3675339 11509166 5.90e-06 0.0000099 0.0083623 0.0128723 15.069006 2.419574e+07 1155.4279 16 1.7217468 0.0205693 438.1074 26.3657532 -14.5889292 464.4732 0.7058899 10013359 -1.48e-05 -0.0000056 0.0227902 0.0207303 10.018474 2.649307e+05 1130.5249 17 1.8696905 0.0130822 468.4013 5.8935547 -2.1560748 474.2948 0.2817954 10269242 -5.40e-06 -0.0000040 0.0050130 0.0084737 11.524859 5.360345e+05 1169.7618 18 5.8745556 0.0269382 459.4295 52.4487915 4.4881229 502.9655 0.6585216 7647716 2.90e-06 0.0000114 0.0452288 0.0100270 12.931605 2.724024e+06 1107.1836 19 6.2821155 0.0231248 467.0049 0.0000000 4.5383015 463.6544 0.1422335 16389276 2.70e-06 0.0000056 0.0000000 0.0045064 12.499353 6.048746e+05 1188.0206 20 5.6739435 0.0424227 441.4896 57.1219177 -2.3343239 498.6115 9.6078730 9581768 -9.50e-06 -0.0000066 0.0491317 0.0849568 10.552262 2.268537e+06 1105.5066 21 3.8055081 0.0276956 474.5028 10.0762024 13.6967726 484.5790 2.8710864 14130641 3.00e-07 0.0000012 0.0087176 0.0353771 11.254631 1.918667e+06 1145.7643 22 1.3476894 0.0233555 475.4897 27.0938110 -0.3060751 502.5835 0.8713754 11599377 -3.20e-06 -0.0000040 0.0236048 0.0059324 15.862392 2.748267e+07 1120.7131 23 2.3694320 0.0082407 466.9540 0.0000000 -44.0294876 456.4023 0.0003811 31156224 -3.00e-07 0.0000002 0.0000000 0.0000424 14.365612 1.225612e+06 1218.0914 24 0.7568264 0.0273188 432.7445 60.5001221 -18.0090752 493.2447 1.5036186 8718220 -6.50e-06 0.0000028 0.0526677 0.0339331 9.814684 4.390969e+05 1088.2137 25 6.1815634 0.0140102 480.5701 14.8707581 4.5279641 495.4409 1.2535824 14251032 4.30e-06 0.0000005 0.0127638 0.0176535 12.137032 1.806407e+06 1150.2050 26 0.1670526 0.2397703 484.6573 9.3578491 3.1012073 494.0151 1.4383816 19979734 2.71e-05 -0.0000657 0.0077639 0.0254288 10.929847 8.179902e+05 1195.9423 27 0.4116030 0.0116828 486.7178 0.0009155 -20.2330170 483.8961 0.5170770 17571940 -6.80e-06 -0.0000062 0.0000008 0.0030708 17.356234 6.972422e+07 1156.4420 28 1.5935348 0.0975181 488.9113 0.9034424 -7.4636097 489.8148 1.2654620 38850504 -8.70e-06 -0.0000470 0.0007602 0.0138468 13.192804 3.798083e+06 1187.4652 29 1.0660473 0.0063044 450.6757 7.6308289 4.3924532 458.3065 0.1487880 43271404 4.60e-06 0.0000032 0.0066897 0.0054501 11.803857 4.953530e+05 1133.0518 30 0.9269978 0.0280522 498.1309 1.3374023 -22.2997589 499.4683 2.1418457 35491748 -7.20e-06 -0.0000025 0.0011556 0.0129917 14.779296 2.384370e+07 1155.9470 31 2.1010513 0.0211931 417.1243 13.0282593 0.5609143 430.1526 0.8065014 25194818 9.00e-07 -0.0000059 0.0112767 0.0190581 10.709024 5.837075e+05 1142.3015 32 2.4854426 0.0043096 482.8287 42.5517883 24.0456352 525.3805 0.0734831 42068284 1.54e-05 0.0000077 0.0380233 0.0038826 11.481558 2.638430e+05 1076.5466 33 5.9501805 0.0062135 511.0038 17.1245728 -2.0556815 528.1284 0.1258160 40916040 4.00e-07 0.0000009 0.0155339 0.0019346 15.786536 8.831474e+06 1085.2739 34 2.0676687 0.0240553 425.6458 0.0000000 0.4430169 425.4696 1.5522254 17004296 -1.30e-06 -0.0000241 0.0000000 0.0022404 21.444437 3.123710e+09 1150.8246 35 1.4754837 0.0148999 686.2984 75.8235474 3.5629139 762.1219 0.7067265 9036964 7.00e-06 0.0000123 0.0773636 0.0167669 10.923225 5.070329e+05 904.2698 36 1.2833834 0.0059302 388.2061 0.0007935 -6.4232211 351.1060 0.0005741 27207434 0.00e+00 0.0000000 0.0000007 0.0000051 22.297335 2.998190e+09 1155.4734 37 3.8720543 0.0312515 417.2045 62.6257019 -6.9626751 479.8302 1.6006013 6244348 -1.70e-06 -0.0000060 0.0547819 0.0357654 9.747457 4.322598e+05 1080.5574 38 0.4790111 0.0033186 445.8684 1.6858826 -24.3723431 447.5543 0.0424801 34933520 -1.50e-06 0.0000001 0.0014810 0.0019651 13.005647 5.894277e+05 1136.6678 39 1.2732722 0.0047902 468.0482 0.0000000 9.2430019 468.0482 6.8092055 44678808 1.90e-06 0.0000003 0.0000000 0.0109428 18.400211 6.696788e+08 1126.5544 40 4.7137332 0.0209352 388.2499 0.0040894 -16.9162006 374.5143 0.3417995 29454406 -1.00e-06 -0.0000019 0.0000035 0.0091248 11.692849 5.469284e+05 1162.8075 41 4.5832558 0.0162871 444.2717 38.1552124 -13.6213560 482.4269 0.2330286 18815832 -7.50e-06 0.0000158 0.0335328 0.0057110 12.726735 1.077041e+06 1099.6927 42 1.4250078 0.0273865 433.4230 55.2590332 -10.4666681 488.6821 1.2224814 9518664 -7.20e-06 0.0000097 0.0484272 0.0298781 9.838017 3.176264e+05 1085.8148 43 0.0005361 0.0414970 396.9891 21.2042847 -0.5858462 414.6100 0.2771052 8894298 -6.40e-06 -0.0000288 0.0185730 0.0037567 14.939976 5.785755e+06 1120.4670 44 0.0001652 0.0227796 388.2372 0.0000000 -12.7527924 383.9200 1.7534391 11072936 -4.90e-06 0.0000038 0.0000000 0.0086798 15.993131 3.830814e+07 1154.3915 45 2.0413733 0.0281339 413.9184 82.8390198 8.6889496 496.7574 0.9549094 6643826 0.00e+00 -0.0000034 0.0719279 0.0279688 9.501096 2.515699e+05 1068.8556 46 5.8971243 0.0079005 483.4892 5.9186401 0.3893614 489.4079 0.0816759 42919912 1.30e-06 0.0000044 0.0052979 0.0027525 13.207749 9.765109e+05 1111.2585 47 0.1971965 0.0277097 407.0197 85.8222656 1.6323705 487.8000 6.7820182 4512446 3.20e-06 -0.0000023 0.0762453 0.0420278 12.671556 7.880555e+06 1039.7849 48 0.6150197 0.0306211 389.7137 10.5391846 3.2693100 400.2528 1.6140084 16713239 4.50e-06 0.0000007 0.0090253 0.0210042 12.030229 2.455747e+06 1157.1964 49 4.6468682 0.0439678 600.0666 8.6245728 -0.5419587 608.6912 0.6536893 13840006 1.10e-06 -0.0000223 0.0082088 0.0129327 11.831675 9.457600e+05 1042.0239 50 0.8531815 0.0178096 586.4072 61.3285522 39.7424126 647.7358 0.7001847 5545159 2.57e-05 -0.0000034 0.0581078 0.0182983 10.528520 4.824184e+05 994.0991 51 3.1415927 0.0161558 388.2705 0.0010376 22.0138817 372.0182 0.0000174 23788616 1.40e-06 -0.0000021 0.0000009 0.0000020 16.603088 8.120818e+06 1157.4319 52 0.9549264 0.0032558 388.2670 0.0005188 -11.2657652 366.8014 0.0001071 26415268 0.00e+00 0.0000000 0.0000004 0.0000024 20.482401 5.477823e+08 1161.7285 53 0.7908035 0.0201335 388.2937 0.0000000 -3.3175592 382.1389 0.0000271 19779832 4.10e-06 -0.0000097 0.0000000 0.0000040 15.432438 3.562059e+06 1170.9193 54 3.7948935 0.0320218 402.9882 36.8593750 -0.7061846 439.8476 0.4344137 9834538 2.10e-06 0.0000024 0.0317436 0.0086067 12.540752 1.686203e+06 1124.2997 55 2.2145631 0.0230064 452.5968 57.8683472 44.7065887 510.4652 0.7489961 8698146 2.84e-05 0.0000036 0.0513155 0.0232286 9.683096 2.609337e+05 1069.8295 56 3.1954527 0.0341749 469.3592 31.1771240 28.7386494 500.5363 2.1179512 19923436 4.90e-06 0.0000031 0.0277658 0.0397158 10.002428 4.616741e+05 1091.6840 57 0.5890409 0.0476098 408.5839 97.4269409 3.4405394 506.0108 1.8779331 6207623 2.80e-06 0.0000033 0.0841799 0.0476098 8.931397 2.500000e+05 1059.9392 58 0.0528528 0.0193999 465.2445 0.0000000 -42.3261871 465.2445 4.3802171 10884138 -5.40e-06 -0.0000170 0.0000000 0.0096105 17.849037 2.852653e+08 1120.9910 59 1.5707334 0.0364971 414.6162 33.3876038 4.6048617 433.4400 4.6491699 3755360 -8.00e-07 -0.0000216 0.0296878 0.0223163 14.417646 2.037957e+07 1091.2374 60 3.0179920 0.0313872 396.8251 14.5644836 4.1163611 411.3896 1.0630966 13623019 9.00e-06 -0.0000123 0.0127048 0.0176634 11.722580 1.215272e+06 1131.8125 61 0.8523530 0.0214600 540.3507 27.7643433 4.9592800 568.1151 0.8079782 25420144 7.00e-07 0.0000009 0.0257892 0.0223287 10.040517 3.613986e+05 1048.8219 62 3.9086089 0.0107538 601.9206 27.5477295 6.3307309 629.4683 0.1959352 7421885 8.00e-07 -0.0000130 0.0254269 0.0084150 10.645915 2.500000e+05 1055.8628 63 0.0305921 0.0228955 476.1695 0.0000000 -36.7569733 476.1695 5.3369660 13738657 -6.00e-06 -0.0000058 0.0000000 0.0131961 16.995443 1.634383e+08 1114.3616 64 6.0818453 0.0178226 484.8479 16.0131531 -13.8505335 500.8610 1.0560383 15485285 -7.30e-06 -0.0000129 0.0144283 0.0156552 12.218871 1.870912e+06 1093.8268 65 2.6736531 0.0034597 388.3199 0.0005798 37.6333923 379.2700 0.0000986 26786464 0.00e+00 0.0000000 0.0000005 0.0000032 19.402843 1.793789e+08 1165.4951 66 0.5840763 0.0161775 390.7841 2.8949585 5.2615285 393.6791 0.3283078 22153760 6.00e-07 -0.0000001 0.0024724 0.0053613 13.852303 3.853674e+06 1168.0162 67 5.8738446 0.0127102 613.8002 45.6375122 -6.5096745 659.4377 1.6547922 7550458 -8.00e-07 0.0000030 0.0420973 0.0110028 14.840498 2.016927e+07 1038.4586 68 0.7003326 0.1181968 635.1302 0.0000000 -0.8311540 632.8980 0.0007826 23842768 6.60e-06 -0.0000584 0.0000000 0.0000168 19.179243 1.504359e+08 1155.2916 69 2.0382004 0.0902884 409.3395 80.3335571 -59.0936546 489.6731 4.6992917 4056355 -6.78e-05 -0.0000417 0.0710538 0.0934099 8.361517 2.692564e+05 1050.2677 70 6.0943661 0.0435392 589.6236 0.0000000 -3.4281051 587.6093 3.7366691 18765156 2.90e-06 0.0000014 0.0000000 0.0191134 14.529815 2.284220e+07 1098.6371 71 3.7602031 0.0832314 404.7939 38.2098389 -3.0003304 443.0038 18.0230598 3125138 -9.90e-06 -0.0000024 0.0335407 0.1738538 9.086372 1.081853e+06 1100.9983 72 4.2385325 0.0395057 398.3005 93.1581421 2.0989809 491.4586 1.5276017 4076094 3.40e-06 -0.0000130 0.0810108 0.0382859 9.341374 2.939118e+05 1056.7888 73 5.1658235 0.0145213 550.2671 47.8892212 15.3622417 598.1563 0.6454003 16497744 7.80e-06 -0.0000043 0.0448925 0.0097871 12.984212 2.849313e+06 1018.8635 74 3.4370072 0.0009616 611.8246 161.8554077 35.2689362 773.6800 0.0122794 5694243 3.80e-05 0.0000380 0.1531047 0.0009616 12.900967 2.500000e+05 895.2998 75 6.2802334 0.0239466 628.9435 72.3813477 -59.5168915 680.8800 0.0262455 13349889 -5.30e-06 -0.0000120 0.0703785 0.0004756 17.088171 1.322959e+07 956.0774 76 1.2139363 0.0359554 720.8580 25.7457275 0.1891483 746.6038 1.4523233 6637907 1.40e-06 -0.0000250 0.0262998 0.0126025 13.937304 9.155820e+06 953.1859 77 1.1512845 0.0107586 678.9570 152.3376465 17.1091232 831.2947 0.1657996 10584692 3.90e-06 -0.0000043 0.1532929 0.0060936 11.600197 4.390611e+05 841.4310 78 4.1806130 0.0721808 417.8424 98.2531433 1.5907160 516.0955 2.6669695 2848586 -1.85e-05 0.0000217 0.0896971 0.0351832 11.093617 1.584074e+06 997.1346 79 3.1480408 0.0412393 401.7710 20.3065796 12.8577614 422.0776 1.9706973 15999844 2.70e-06 0.0000011 0.0183107 0.0430846 9.476317 2.830451e+05 1088.6968 80 3.6273131 0.0440367 409.1613 77.8714600 16.9860001 487.0328 1.5980138 5413029 2.84e-05 -0.0000097 0.0703396 0.0404070 9.224892 2.771390e+05 1029.2064 81 0.2529656 0.0370695 400.8728 14.5579529 17.0072136 415.4308 2.2298334 14481657 1.12e-05 0.0000016 0.0130609 0.0415978 9.934386 5.230562e+05 1100.0636 82 4.3111601 0.0023183 401.6523 0.0175476 -15.1165419 363.4602 0.0000807 26413130 0.00e+00 -0.0000009 0.0000158 0.0000022 20.116095 3.572110e+08 1112.1362 83 2.9520261 0.0276420 478.9229 80.9860535 26.5267811 559.9090 1.0947368 4782128 2.52e-05 -0.0000026 0.0788607 0.0289302 9.699101 2.761134e+05 945.9647 84 4.2242775 0.0274940 493.9069 26.4050598 5.0188756 520.3120 1.8630586 7332767 6.00e-06 -0.0000012 0.0262747 0.0374291 9.933848 5.219535e+05 978.5579 85 4.3803592 0.0623979 374.8027 236.9539185 0.0085587 611.7567 3.1847773 3977271 -9.10e-06 0.0000099 0.2067550 0.0664151 8.837606 2.912484e+05 909.1075 86 4.3153033 0.0526704 410.9751 17.6630554 -8.8123970 428.6381 1.3459315 10883193 -2.54e-05 -0.0000099 0.0160940 0.0257030 10.718192 7.600021e+05 1079.8286 87 0.1453524 0.0417146 392.6238 114.4607849 -5.8416982 507.0846 6.4909997 2782601 1.80e-06 0.0000054 0.1017079 0.0723394 10.254725 1.167886e+06 1010.9268 88 2.9529188 0.0248701 322.1551 0.0000000 5.7107706 322.1551 0.5241104 34301732 1.54e-05 -0.0000033 0.0000000 0.0027360 17.880693 9.325815e+07 1205.3911 89 4.4562473 0.0335179 486.8655 129.2628174 3.7106555 616.1284 0.8591496 7144441 7.90e-06 0.0000000 0.1285708 0.0196506 10.737001 5.521281e+05 876.1195 90 1.7717868 0.0132856 325.8745 13.5824890 -2.6707351 339.4570 0.3794811 31873556 -1.00e-06 -0.0000010 0.0112689 0.0132332 10.374478 2.500000e+05 1191.7302 91 4.5207157 0.0368364 496.4612 15.2979736 4.0287919 511.7592 1.6599982 9477036 3.50e-06 -0.0000097 0.0153709 0.0332564 10.147640 4.978135e+05 979.9561 92 5.0104370 0.0314421 455.2575 60.1119080 -1.5332880 515.3694 3.6783929 11772932 6.90e-06 -0.0000024 0.0576308 0.0316689 12.344631 4.546881e+06 982.9407 93 0.3361260 0.0327392 405.7759 76.9106445 4.7426543 482.6866 0.1330874 3526524 -1.00e-07 0.0000089 0.0699541 0.0046920 12.161665 5.717404e+05 1022.5332 94 4.1626000 0.0093672 408.6243 118.4683838 -1.7119368 527.0927 0.2118878 2087112 -1.24e-05 -0.0000199 0.1082225 0.0087788 10.661747 2.576921e+05 976.2059 95 3.2094927 0.0301643 361.1405 156.9351196 2.0339043 518.0756 1.1272383 3609383 1.60e-05 0.0000076 0.1353440 0.0292287 9.728622 2.615544e+05 1002.5929 96 5.5194273 0.0312128 489.5268 10.1972046 0.8399060 479.3717 1.3567219 6630481 2.40e-06 -0.0000002 0.0101651 0.0187352 12.081940 2.339984e+06 992.9619 97 3.6025903 0.0619960 381.4140 65.9026794 57.5214005 447.3167 2.8705494 3477814 3.26e-05 0.0000495 0.0585944 0.0540461 9.453472 4.623801e+05 1058.8241 98 2.2358391 0.0337043 444.1265 2.0495605 -3.4112990 446.1760 1.1464005 9634529 -6.60e-06 -0.0000091 0.0019504 0.0090660 14.745733 1.613433e+07 1048.7809 99 1.6605543 0.0460184 406.7386 56.2995300 5.2219858 463.0381 2.2289720 6430317 1.40e-06 -0.0000103 0.0515108 0.0482354 9.304350 2.878563e+05 1036.6650 100 1.4652292 0.0235512 335.8281 7.3266602 2.0780013 343.1548 1.2626098 21988250 2.90e-06 -0.0000031 0.0061316 0.0208829 11.441004 1.068818e+06 1187.5719 101 4.5130167 0.0405952 377.4371 11.6819458 16.5859966 389.1190 2.1339903 9863084 5.90e-06 -0.0000010 0.0103064 0.0360968 10.427298 7.184253e+05 1121.7780 102 4.8275595 0.0743301 372.8984 20.1931152 4.8417773 393.0915 4.9963055 7598710 1.98e-05 0.0000331 0.0176629 0.0503927 11.136347 1.917842e+06 1123.0583 103 4.4047194 0.0537709 337.0520 6.5729980 -3.2103639 343.6250 1.1092265 9753377 -3.90e-06 -0.0000438 0.0055472 0.0190060 11.517440 1.199007e+06 1178.3563 104 1.2178153 0.0622412 340.2065 0.0000000 -8.6642761 340.2065 7.0708871 4730678 -8.00e-06 -0.0000446 0.0000000 0.0340615 13.668903 1.889344e+07 1188.5195 105 1.8477196 0.0380714 387.1126 12.8154297 -2.6654868 399.9280 8.6854477 4046165 9.80e-06 -0.0000001 0.0114076 0.0583026 11.899248 5.305176e+06 1110.5918 106 1.2184675 0.0253073 404.6951 35.4920654 25.3002968 440.1872 1.2144966 6750660 3.80e-06 0.0000080 0.0324278 0.0224436 11.037566 8.956504e+05 1059.0024 107 2.8426521 0.0192208 465.3434 19.1777344 -2.1798112 484.5212 0.4027589 27839356 -1.30e-06 0.0000028 0.0186549 0.0136481 10.392117 2.781452e+05 1008.8470 108 0.6488651 0.0215986 440.0932 45.7728577 14.0333395 485.8661 0.7464559 3671045 1.25e-05 -0.0000069 0.0421589 0.0227694 9.759458 2.762670e+05 1039.9489 109 3.4481411 0.0056920 468.5590 29.6457520 7.8410149 498.2047 0.1389711 26051622 7.70e-06 0.0000070 0.0289381 0.0062283 11.065987 2.500000e+05 994.8069 110 3.7625690 0.0315569 423.3007 0.0000000 -0.9709566 420.0895 2.6545441 8637834 -3.00e-06 -0.0000131 0.0000000 0.0097673 16.528202 1.026792e+08 1072.9093 111 3.6095321 0.0307710 409.9495 0.0000000 -14.0851908 398.5285 0.0000857 11944316 -1.18e-05 -0.0000075 0.0000000 0.0000032 19.052301 1.263375e+08 1090.6455 112 0.0348955 0.0247954 404.2471 0.0000000 -4.8464699 396.4838 0.5811085 9848764 -7.20e-06 -0.0000108 0.0000000 0.0108968 12.265389 1.195958e+06 1102.2064 113 1.5708560 0.0346545 404.3028 3.9148254 -6.7318835 408.2177 1.1876347 19213882 -3.20e-06 -0.0000054 0.0035622 0.0240340 10.690697 5.282218e+05 1095.0618 114 3.2958975 0.0300608 444.4190 71.1498413 -12.7837257 515.5688 4.5189872 9995168 -9.30e-06 0.0000006 0.0658859 0.0470359 11.178219 1.922886e+06 1008.7457 115 2.9281099 0.0284939 455.5407 108.3299255 54.3895569 563.8707 1.2040021 4656641 3.99e-05 0.0000194 0.1015415 0.0275648 10.142408 4.163595e+05 958.5243 116 0.0567865 0.0366037 427.1938 96.4570923 -11.2017269 523.6509 4.6785631 5864691 -5.40e-06 0.0000080 0.0901852 0.0303728 13.123512 8.023586e+06 973.0876 117 5.2879939 0.0174381 407.8834 80.9165649 -8.4786177 488.8000 0.4434487 4892179 -8.00e-07 0.0000070 0.0720263 0.0080095 12.897839 2.212739e+06 1042.5140 118 3.3765967 0.0717517 428.6212 102.3158875 -0.0010124 530.9371 5.1666064 3365104 1.03e-05 0.0000132 0.0948019 0.0783686 9.344182 5.410609e+05 976.9445 119 0.5063162 0.0376331 433.7624 103.7931519 10.9044790 537.5555 3.0222921 6451252 2.13e-05 0.0000120 0.0959827 0.0451735 10.344212 9.549064e+05 977.5803 120 5.5479264 0.0599544 434.4426 109.4284058 41.9412766 543.8710 3.7374985 4655294 2.17e-05 0.0000118 0.1005499 0.0732142 8.823666 3.518684e+05 978.8710 121 3.9702454 0.0424820 422.9643 153.7374573 43.9950485 576.7017 2.9023120 3421969 6.60e-06 0.0000076 0.1413909 0.0519884 9.645906 5.682516e+05 933.5848 122 1.4276159 0.0298516 418.5026 14.9915771 9.6874886 433.4942 1.2518033 17844076 7.50e-06 -0.0000203 0.0136556 0.0267587 10.365876 4.812863e+05 1082.8456 123 1.7424270 0.0211194 409.4274 4.5797424 5.1414452 414.0071 1.9081146 12163841 -4.40e-06 0.0000009 0.0041302 0.0110832 15.165638 2.471730e+07 1104.2616 124 2.1385789 0.0661647 265.1468 28.2730713 -4.4210529 293.4199 2.2873418 12401912 -1.26e-05 -0.0000010 0.0230631 0.0465212 9.522735 4.392934e+05 1197.6267 125 6.1085801 0.0440525 295.5614 0.0000000 -39.5098190 285.6800 32.2911530 4622434 -7.70e-06 -0.0000431 0.0000000 0.0558722 15.363013 1.522619e+08 1194.9082 126 3.7967129 0.0317779 231.5043 0.7257233 -13.5153656 232.2300 0.9396314 15833789 -1.16e-05 -0.0000056 0.0005755 0.0132297 12.642322 2.869813e+06 1260.2078 127 1.7952821 0.0326481 242.8164 0.0000000 -12.0239391 242.8164 17.2374649 15428531 -9.90e-06 -0.0000108 0.0000000 0.0308873 16.312361 2.246658e+08 1249.0038 128 2.1168747 0.0628870 290.6330 37.4869995 -1.1895900 328.1200 1.2518181 22604114 3.80e-06 -0.0000083 0.0312753 0.0196378 11.680795 1.595810e+06 1161.1270 129 2.6960533 0.0261016 254.9940 192.3505707 47.9591827 447.3445 1.0027084 4430118 4.10e-05 0.0000244 0.1545891 0.0270267 9.768824 3.150288e+05 1051.9192 130 0.0002569 0.0291693 303.2838 0.0000000 -3.6019113 293.4673 1.9821750 13054683 9.20e-06 -0.0000034 0.0000000 0.0077198 16.797785 7.618762e+07 1187.2191 131 1.6191441 0.0215267 236.9980 119.8960266 -9.5276499 356.8940 0.7818194 5216190 -1.38e-05 -0.0000118 0.0955139 0.0215483 10.109425 2.772874e+05 1135.3776 132 0.3104938 0.0228665 273.9884 106.3699341 28.7036915 380.3583 0.7550328 6108114 9.30e-06 0.0000152 0.0876253 0.0228429 9.774317 2.525280e+05 1107.5483 133 2.8585732 0.0379800 273.3537 32.1662598 -5.6642985 305.5200 1.5151381 11146017 -1.00e-05 -0.0000157 0.0264557 0.0221982 11.637231 1.558051e+06 1183.6876 134 4.0372620 0.0214835 215.7539 29.7543640 -2.6442590 245.5083 1.0824323 11657446 -1.90e-06 -0.0000002 0.0232831 0.0264659 10.049191 4.304631e+05 1248.1840 135 4.6909924 0.0124395 222.9895 19.4857178 -11.8901978 242.4752 0.3709500 47113604 6.00e-07 0.0000054 0.0152784 0.0124395 10.580486 2.500000e+05 1255.8889 136 4.6437817 0.0142128 208.6369 23.4798126 -2.1091585 232.1167 0.9771010 31040080 -1.90e-06 -0.0000061 0.0182247 0.0123111 13.045906 3.040131e+06 1264.8748 137 3.6733911 0.0380682 238.6277 55.5360260 9.3635521 294.1637 1.2658331 13819316 -1.40e-06 -0.0000057 0.0439747 0.0346727 9.292687 2.578053e+05 1207.3739 138 5.9065123 0.0056303 218.1501 32.1417084 5.5673437 250.2918 0.0883821 27481816 2.50e-06 -0.0000044 0.0250655 0.0041231 11.687637 3.186059e+05 1250.1666 139 3.0014117 0.0275107 227.5256 53.9984741 -13.5665007 281.5240 1.1426973 7715975 -1.64e-05 0.0000011 0.0426984 0.0256235 10.322105 4.401317e+05 1210.6495 140 0.5875238 0.0663242 310.3238 16.8740540 -18.8334122 327.1978 12.8942995 68954064 -1.50e-05 -0.0000122 0.0143312 0.0469105 13.810807 3.239463e+07 1160.5619 141 1.2692132 0.0204048 201.9395 66.8510590 10.3859930 268.7905 0.8433577 18501818 2.80e-06 0.0000091 0.0515954 0.0219706 10.216350 3.761459e+05 1228.8270 142 1.4898387 0.0200451 203.6484 89.6723328 13.7133560 293.3207 0.7629214 6163314 1.87e-05 0.0000243 0.0694381 0.0213627 10.085019 2.760671e+05 1201.7266 143 2.5944436 0.0168814 208.7712 38.4300232 -2.5972137 247.2012 0.4787988 11456358 -2.90e-06 -0.0000042 0.0298944 0.0155344 10.274288 3.093403e+05 1247.0961 144 0.3290379 0.0080563 205.8031 84.7248840 -26.1297226 290.5280 0.0946265 7333121 -7.20e-06 -0.0000017 0.0654843 0.0040484 11.936041 3.923168e+05 1209.0942 145 6.2238998 0.0209877 220.2083 112.3526001 31.8043404 332.5609 0.6548770 4472032 1.52e-05 0.0000101 0.0883204 0.0172693 10.607263 3.691818e+05 1159.7495 146 2.6373351 0.1320393 287.6413 337.6320801 -6.3932304 625.2734 10.4379930 1719525 -3.52e-05 0.0000073 0.2812193 0.1271524 9.047504 7.379823e+05 862.9686 147 1.5599091 0.0714339 271.5806 107.1855774 3.0367730 378.7662 4.7034159 4507146 2.60e-06 -0.0000114 0.0879904 0.0687668 9.664555 5.482442e+05 1110.9658 148 2.3398309 0.0084935 264.5526 43.8287659 -8.6430550 308.3813 0.1301304 8699155 -5.30e-06 -0.0000003 0.0353412 0.0052039 11.665416 4.285315e+05 1196.3306 149 4.5890589 0.0293110 210.0959 89.1183929 9.4945612 299.2143 1.1154171 4735673 1.19e-05 0.0000057 0.0692589 0.0281025 9.869255 3.029919e+05 1197.6238 150 5.6339970 0.0175952 219.7626 65.4285126 0.0631906 285.1911 1.3464341 10841644 2.50e-06 -0.0000002 0.0510569 0.0176551 12.315265 2.759379e+06 1216.0536 151 3.1894400 0.0463924 230.0895 56.6546936 -2.6015365 286.7442 4.0658832 18429222 -1.03e-05 -0.0000680 0.0449331 0.0519577 10.491221 9.797314e+05 1204.2125 152 2.3685338 0.0314742 207.3812 47.9874573 5.8334694 255.3687 1.9298444 3871222 7.10e-06 0.0000147 0.0372848 0.0210890 12.459912 3.844529e+06 1239.0646 153 4.6025524 0.0610740 201.2729 0.0000000 2.9994371 192.4988 6.1138220 8345019 1.12e-05 -0.0000124 0.0000000 0.0496001 11.708340 3.330302e+06 1294.3488 154 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 155 1.1751279 0.0608584 251.5824 24.6713409 -12.9801855 276.2538 3.1575904 4223857 -1.19e-05 0.0000005 0.0197822 0.0623755 9.082760 3.595861e+05 1222.4780 156 4.2846923 0.0256042 204.0367 40.3245850 -20.9615650 244.3613 0.4580286 5921102 -9.40e-06 -0.0000197 0.0312003 0.0053663 14.680748 8.443778e+06 1252.1184 157 3.6912289 0.0288871 244.6763 72.8766174 -24.1510181 317.5529 1.3431267 4744866 -7.10e-06 0.0000256 0.0580900 0.0284196 10.285993 5.730424e+05 1181.6709 158 4.1501126 0.0513105 158.3926 289.5003967 76.7649689 447.8930 2.7627828 1883121 9.21e-05 0.0001222 0.2154689 0.0554406 9.249574 3.980115e+05 1054.0828 159 5.8252501 0.1153564 156.5117 161.8287811 -6.4937787 318.3405 7.5352988 3001780 6.90e-06 0.0000185 0.1210542 0.1293779 8.159244 3.044944e+05 1175.0005 160 2.5666041 0.0829851 148.6916 152.6333466 15.0731239 301.3250 5.0677505 1702084 2.43e-05 0.0000404 0.1135317 0.0717465 9.670888 7.876975e+05 1191.7778 161 1.1705346 0.0564001 118.3649 3.8913116 -5.4067960 122.2562 0.1592854 12359431 -7.90e-06 -0.0000170 0.0028238 0.0031511 14.302800 3.361553e+06 1374.1332 162 5.9487176 0.0474914 528.7094 23.8737183 6.3447204 552.5831 4.6017065 8334783 2.00e-06 -0.0000229 0.0248403 0.0483768 11.104132 2.047327e+06 937.2140 163 1.7701923 0.0320235 532.5034 51.4166260 16.3120384 583.9200 1.5261294 9094520 2.29e-05 0.0000005 0.0537685 0.0356725 9.639401 3.229007e+05 904.8434 164 3.1417832 0.0266583 496.1202 3.2051086 -11.3500967 489.7627 2.2812116 8407908 2.30e-06 -0.0000022 0.0032366 0.0105722 15.812719 3.895944e+07 987.0516 165 1.9013820 0.0324615 495.8323 68.9540405 -4.2578306 564.7864 1.6219826 8977111 -1.02e-05 -0.0000072 0.0694708 0.0300119 10.525954 7.107464e+05 923.6069 166 4.2017875 0.0792308 373.9078 0.0000000 -0.4418248 373.6087 4.1631083 19747308 7.90e-06 -0.0000076 0.0000000 0.0349951 12.229684 4.879174e+06 1116.7084 167 4.7109509 0.0310972 364.9009 17.7066345 1.6352379 382.6076 2.0791323 11774919 -5.10e-06 -0.0000198 0.0156980 0.0393177 9.998992 4.334241e+05 1110.2504 168 0.0286904 0.0573511 407.4841 199.5451355 3.2786562 607.0292 2.8214767 2058315 5.30e-06 0.0000315 0.1847196 0.0582915 9.089086 2.657762e+05 880.7147 169 1.1264369 0.0373757 355.6315 94.5248108 9.3288994 450.1563 2.2125418 4789232 5.20e-06 -0.0000241 0.0831273 0.0425080 9.822953 5.230106e+05 1042.5840 170 4.7122388 0.0349133 406.6212 18.8512268 -26.1545506 424.6638 0.6445178 14603041 -2.39e-05 -0.0000259 0.0173232 0.0093607 13.170068 2.454969e+06 1069.3579 171 4.1369362 0.0766347 304.3691 118.4113464 7.2265420 422.7805 4.0164046 6966434 3.52e-05 0.0000274 0.0999054 0.0762553 8.830722 3.614842e+05 1066.8230 172 5.0643725 0.0964543 395.6836 115.1936340 41.1953812 510.8772 3.9662921 3020132 3.18e-05 0.0000223 0.1049477 0.0816655 8.508197 2.602661e+05 982.4358 173 5.6293221 0.0503762 296.6656 7.2726135 -1.7246743 303.9382 5.2787004 24786328 -2.60e-06 -0.0000172 0.0061009 0.0385829 12.408481 6.626173e+06 1184.7838 174 0.6972474 0.0500697 389.9069 120.1149292 16.8878250 510.0218 2.6242695 3262168 1.48e-05 0.0000234 0.1081761 0.0566149 9.031928 3.339698e+05 990.2496 175 3.0376244 0.0248723 336.6650 128.4631042 -6.7371621 465.1281 0.4846936 9463982 -1.40e-06 0.0000023 0.1111375 0.0087165 12.760646 1.667076e+06 1027.4305 176 2.0106387 0.0329384 281.3593 46.0406494 16.6670723 327.4000 1.0789375 11700807 9.80e-06 0.0000082 0.0381245 0.0255465 10.191358 4.534188e+05 1161.5991 177 5.8546815 0.0641725 289.3719 235.8067017 -0.8949147 525.1786 2.8183181 2012873 -5.70e-06 0.0000074 0.1963032 0.0641725 8.677927 2.500000e+05 965.4303 178 3.4739854 0.0936796 332.0297 84.3682556 -20.5946922 416.3979 5.1705766 3285164 -2.58e-05 -0.0000066 0.0725467 0.0813064 9.189792 5.075391e+05 1078.5828 179 4.3419905 0.1004403 294.0995 57.3405151 18.0441093 351.4400 4.3105941 20844514 3.15e-05 0.0000466 0.0475755 0.0673675 9.533856 6.033519e+05 1147.9126 180 0.5569316 0.0252581 293.2041 55.6250610 6.7855310 348.8292 1.0047277 6652898 7.10e-06 0.0000025 0.0465300 0.0191583 11.236161 1.000605e+06 1139.8406 181 4.6844597 0.0899191 265.2206 129.1897278 6.1348190 394.4103 4.9080334 4823923 1.86e-05 -0.0000018 0.1053834 0.0836945 8.936565 3.277787e+05 1096.7118 182 2.0003352 0.0137973 258.7853 46.5346680 -12.1142673 305.3200 0.3783501 18250848 -1.07e-05 -0.0000209 0.0376842 0.0136382 10.238905 2.528532e+05 1188.3231 183 4.1281867 0.0206244 244.4776 3.5987549 16.4063950 248.0764 1.2283775 20625088 1.44e-05 -0.0000040 0.0028761 0.0264954 10.360671 5.800816e+05 1247.6724 184 5.8823633 0.0281540 246.5192 0.0000000 -18.2291698 246.5192 0.9358853 20677346 -2.90e-06 -0.0000041 0.0000000 0.0038040 17.929567 1.525796e+08 1247.5835 185 5.4248939 0.0136898 254.9014 41.0443115 -21.7788792 295.9457 0.4446016 9857540 -1.19e-05 0.0000182 0.0330388 0.0143488 10.426425 3.414408e+05 1201.2626 186 3.3150311 0.0402016 244.2287 103.2835846 4.0881491 347.5123 0.9570600 4787275 7.30e-06 -0.0000197 0.0827222 0.0234196 10.261115 3.877225e+05 1145.2756 187 3.4597988 0.0417778 266.8189 71.1764832 -8.6903248 337.9954 2.0309169 6317984 -3.00e-06 -0.0000144 0.0578107 0.0447895 9.386662 3.375195e+05 1160.0223 188 0.0516132 0.0173071 458.4233 41.6723328 14.8396063 500.0957 0.5835287 8757199 1.10e-05 -0.0000025 0.0370436 0.0174805 10.267204 2.641526e+05 1083.2808 189 4.9503922 0.0282415 396.3953 1.2047424 0.6727794 397.6000 1.6238108 28748238 -1.00e-06 -0.0000097 0.0010307 0.0173038 12.868989 4.055069e+06 1167.6233 190 2.6731162 0.0173940 490.3484 40.1551514 -8.0692482 530.5035 0.5341386 14837678 -5.10e-06 -0.0000047 0.0363962 0.0176008 10.016968 2.649662e+05 1063.1237 191 0.5334142 0.0231568 498.7746 32.7496948 3.6790993 531.5243 0.7983217 30778834 1.70e-06 0.0000039 0.0298475 0.0241809 9.671789 2.627302e+05 1064.4860 192 0.2791347 0.0164883 436.6657 46.9634705 -6.9347901 483.6292 0.4607596 9594235 -6.20e-06 -0.0000104 0.0412852 0.0101999 11.966116 9.924457e+05 1090.5731 193 5.6432557 0.0201462 460.0402 4.8667297 5.3702698 464.9069 0.0409994 27908340 8.50e-06 -0.0000064 0.0043385 0.0018321 13.214683 7.028931e+05 1116.8783 194 4.7224760 0.0312237 425.1406 4.5353699 -6.1203647 429.6760 3.8946359 28792468 -8.60e-06 -0.0000132 0.0039713 0.0368013 11.849185 2.602563e+06 1137.4982 195 3.4412265 0.0581236 413.1343 77.3626404 -13.1347647 490.4969 2.8928027 12410514 -5.10e-06 -0.0000144 0.0682302 0.0577270 9.192840 3.551036e+05 1056.4841 196 5.7488012 0.0019824 403.0272 4.4807434 -11.6008635 407.5079 0.0302962 26576068 -7.00e-07 -0.0000010 0.0038817 0.0019824 12.123337 2.500000e+05 1149.8374 197 5.7297049 0.0043001 450.4884 16.5894775 13.5866623 467.0779 0.0953357 24499846 4.10e-06 0.0000022 0.0146883 0.0038883 12.126189 4.940773e+05 1112.8444 198 6.2770338 0.0073883 409.0697 6.6188049 7.4710326 415.6885 0.1156888 26904310 4.20e-06 -0.0000061 0.0057482 0.0047477 11.761203 3.061542e+05 1144.8336 199 1.8748155 0.0337128 491.6411 12.9872437 -0.2408368 504.6284 1.0283564 27594166 3.50e-06 -0.0000041 0.0117792 0.0183704 11.472737 1.106135e+06 1089.5685 200 5.8307519 0.0040018 546.9897 16.5331421 11.1830244 563.5228 0.1127840 37658472 2.20e-06 0.0000005 0.0155113 0.0038921 12.542143 7.279909e+05 1049.3418 201 4.8755593 0.0125242 610.4081 16.1129761 1.5141308 626.5211 5.6955333 29301964 -7.00e-07 -0.0000104 0.0156765 0.0228373 14.827044 3.608910e+07 1011.7305 202 1.1198250 0.0516330 766.0284 73.1635132 -4.4654346 839.1920 2.2473648 4625500 -8.50e-06 -0.0000046 0.0739607 0.0535007 8.884701 2.582755e+05 916.0586 203 2.8753052 0.0292215 651.4460 30.0136719 1.6261115 681.4597 1.9573126 25579410 2.40e-06 -0.0000082 0.0299933 0.0285597 11.206527 1.291040e+06 970.6663 204 2.2981203 0.0321318 748.5365 62.8635254 -29.6638069 811.4000 0.8673154 5718247 -3.00e-07 -0.0000124 0.0639251 0.0264034 9.505325 2.503942e+05 920.5293 205 5.4933667 0.0082074 557.5358 0.6163940 -5.8482823 558.1522 0.7845772 39970788 -1.80e-06 -0.0000016 0.0005827 0.0054384 15.969561 3.314747e+07 1057.2775 206 2.2368121 0.0190516 688.5466 76.7865601 -13.6870594 765.3331 1.2255987 6659916 -5.90e-06 0.0000012 0.0774845 0.0153964 12.661965 3.410815e+06 914.2054 207 1.4955611 0.0215867 749.5330 27.7869873 -1.8632263 777.3200 0.6936781 10321102 5.80e-06 0.0000164 0.0287053 0.0159639 11.085210 5.581110e+05 940.2227 208 5.2631025 0.0341159 423.8182 25.8463745 16.2617893 449.6646 0.7347412 12123442 2.61e-05 0.0000109 0.0232471 0.0121977 12.372561 1.981743e+06 1085.9628 209 5.1061292 0.0375391 420.8898 2.7238159 0.0076863 423.6136 0.4340235 15188966 -6.20e-06 0.0000018 0.0024182 0.0100736 11.869621 9.405891e+05 1123.6627 210 1.6519448 0.0242032 409.2860 4.2119141 1.1688255 413.4979 0.1198444 25340140 -9.00e-07 -0.0000028 0.0036579 0.0020360 15.447766 5.612531e+06 1147.2560 211 2.6097248 0.0523872 500.2757 86.9176025 14.5672150 587.1933 2.1563251 5296021 3.00e-06 0.0000126 0.0789513 0.0523821 8.871098 2.556373e+05 1013.9838 212 0.9503633 0.0283960 574.0344 17.2127075 1.1010020 591.2471 3.3061759 28036872 -4.50e-06 -0.0000069 0.0163926 0.0350534 11.646445 2.795396e+06 1032.8137 213 4.3836589 0.0438987 446.9225 6.7676392 -15.1327581 453.6901 3.0271022 13639543 -1.69e-05 -0.0000063 0.0059519 0.0368866 11.209352 1.728854e+06 1130.2882 214 4.9086733 0.0131381 636.5668 34.2377319 -2.5751851 670.8045 0.3569922 28434876 2.00e-07 0.0000001 0.0337981 0.0123562 10.513165 2.673191e+05 978.7706 215 1.0992032 0.0357522 656.1976 6.8223267 -4.7597685 663.0199 4.4814758 15595127 3.40e-06 0.0000020 0.0068152 0.0375214 12.117715 4.622542e+06 994.2273 216 0.8734114 0.0467961 763.9097 57.4381104 -1.3624436 820.2256 2.3924296 6445678 5.80e-06 -0.0000198 0.0573713 0.0240031 12.447021 4.303531e+06 943.7264 217 1.2004397 0.0335407 467.9122 0.0000000 -30.5919895 467.4045 0.8767677 18301404 -1.76e-05 -0.0000074 0.0000000 0.0041820 17.363787 9.404506e+07 1126.3516 218 3.2211773 0.0156566 758.4569 89.0411987 -7.9469681 847.4981 0.5709110 10884959 -3.00e-07 0.0000124 0.0902482 0.0161547 10.547763 3.311998e+05 897.5845 219 0.4289240 0.0383854 424.3014 44.5567627 12.8497324 468.8582 2.4017200 8730902 3.30e-06 -0.0000013 0.0401377 0.0479693 9.514470 4.311861e+05 1065.5415 220 0.6257334 0.0223225 422.7468 0.5704651 -6.1506858 420.9482 0.0356192 22535390 -1.80e-06 -0.0000034 0.0005080 0.0007802 16.243025 7.910094e+06 1122.4886 221 0.8723736 0.0406082 415.9424 11.4111328 -15.9500761 427.3535 0.8257976 21666606 -1.90e-05 -0.0000241 0.0099830 0.0105783 13.270001 4.318775e+06 1131.6472 222 2.9487243 0.0150142 435.4266 68.6704712 -17.6360588 504.0971 0.4481404 8334152 -1.73e-05 0.0000031 0.0601024 0.0150142 10.253616 2.500000e+05 1073.8881 223 2.9635582 0.0369213 455.3170 37.2224121 -1.6382087 492.5394 2.5918281 10161785 -1.20e-06 0.0000009 0.0328675 0.0422071 10.248691 6.926337e+05 1095.2772 224 5.5604739 0.0463326 478.6633 10.1799622 -15.2926350 488.8432 1.6424534 11260165 -4.10e-06 -0.0000279 0.0091082 0.0344528 9.970886 5.203885e+05 1107.4857 225 0.7486501 0.0398738 520.0967 27.3995361 -29.8003597 547.4962 5.8864684 6898337 -1.06e-05 -0.0000374 0.0251865 0.0662385 10.384605 1.516752e+06 1060.4672 226 2.0561435 0.0722817 638.9504 88.9130859 -31.0996590 727.8635 4.9599171 17630590 -1.41e-05 0.0000021 0.0876907 0.0891513 8.694615 3.605274e+05 925.0272 227 0.4982191 0.0046339 420.5725 0.3473816 -21.7738514 420.9199 0.1974285 31154784 -9.00e-07 0.0000010 0.0003025 0.0062765 11.911037 6.337882e+05 1147.8453 228 0.9415824 0.0333418 685.0053 120.9772949 9.8603373 805.9826 4.9368238 12197846 2.13e-05 -0.0000004 0.1222536 0.0579639 10.511680 1.489276e+06 868.5833 229 0.4533150 0.0276808 569.9510 16.2549438 -5.2587948 586.2059 0.8741311 35080336 -3.90e-06 -0.0000057 0.0154354 0.0235839 10.004817 3.489940e+05 1036.8392 230 1.6621644 0.0465645 709.5063 113.9003906 3.0864782 823.4067 1.7535986 8739602 9.00e-07 -0.0000105 0.1153194 0.0268082 11.200732 1.066634e+06 873.7946 231 1.0793331 0.0188421 549.2617 2.9382935 -15.5331745 552.2000 0.8555444 43346888 -9.60e-06 0.0000016 0.0027510 0.0072713 14.951643 1.532797e+07 1065.1304 232 4.7141528 0.0411728 673.2536 140.8598633 -3.5922279 814.1135 5.6597176 5829434 -9.30e-06 0.0000176 0.1407636 0.0565879 10.955388 1.624750e+06 859.8240 233 0.1997989 0.0898380 737.5828 175.1514282 -25.5603523 912.7343 22.2926464 11155406 -7.44e-05 -0.0000423 0.1642551 0.1022138 11.871192 8.648636e+06 891.1866 234 4.3153896 0.0417294 606.6025 41.4783936 6.4536052 648.0809 1.7669098 22511344 6.90e-06 0.0000011 0.0401223 0.0364107 9.918600 4.840428e+05 992.3199 235 3.7587399 0.0455800 669.5507 192.0830688 -2.8455110 861.6338 2.0932271 4278624 -1.00e-06 0.0000357 0.1904532 0.0495460 9.033363 2.896092e+05 816.4747 236 0.4886341 0.0264695 446.7435 53.8656616 4.1155024 500.6091 0.9714143 23644486 5.10e-06 -0.0000048 0.0475769 0.0271499 9.670229 2.908541e+05 1078.3162 237 3.2634721 0.0462333 651.3786 180.4982910 -1.3593230 831.8769 2.1312032 4016170 -4.50e-06 -0.0000130 0.1776316 0.0472110 9.283430 2.831561e+05 835.6400 238 4.8792381 0.0350100 698.8641 46.2558594 5.4287648 745.1200 2.3713317 9369743 1.24e-05 0.0000000 0.0450192 0.0266131 11.986229 2.461753e+06 981.2136 239 4.8604302 0.0350307 536.4550 24.5302124 1.6756880 556.9904 3.4628356 7050015 8.40e-06 0.0000078 0.0227755 0.0225153 13.643413 1.077392e+07 1052.5153 240 3.0886207 0.0625205 426.4877 107.0616455 8.6604605 533.5493 3.9157984 9709757 1.29e-05 -0.0000003 0.0946007 0.0702416 9.116240 3.366974e+05 1024.6598 241 4.7125449 0.0430709 543.9439 17.4328613 1.9718819 558.5153 2.1838117 15154295 -5.20e-06 -0.0000100 0.0162658 0.0125189 14.985366 2.016914e+07 1054.3191 242 4.9776549 0.0071861 594.2603 14.2429199 -5.2092190 608.5032 0.0980270 33331160 -6.20e-06 -0.0000185 0.0136767 0.0045645 11.514355 2.804756e+05 1027.1606 243 1.3134558 0.0361383 616.8017 70.7489624 10.9230080 687.5507 0.7635341 27873736 1.42e-05 0.0000016 0.0685625 0.0162369 11.253005 7.648061e+05 961.1417 244 1.5365144 0.0200743 707.2422 28.3293457 -39.8058052 735.5716 0.6016766 8492782 -2.10e-06 -0.0000209 0.0264591 0.0179586 10.229105 2.571117e+05 1042.3542 245 1.5653869 0.0642637 693.9487 150.3799438 4.4182734 844.3287 4.1317534 4198277 1.13e-05 -0.0000052 0.1425063 0.0702679 9.248857 3.677109e+05 904.8715 246 5.2589579 0.0244886 495.4160 20.7609863 -33.9446640 516.1770 7.8633752 12413167 -4.10e-06 0.0000054 0.0188304 0.0387069 13.391194 1.740628e+07 1081.7611 247 2.5970473 0.0414126 654.7842 64.6488647 1.1996871 719.4330 1.5871735 5455541 -5.40e-06 -0.0000073 0.0635211 0.0346254 9.864050 4.573364e+05 953.1056 248 1.4007214 0.0090239 448.6846 0.0270996 -2.9303145 448.7117 0.7591063 31004854 -1.20e-06 0.0000000 0.0000240 0.0047632 16.450443 3.834682e+07 1127.2103 249 0.8245210 0.0256728 476.0648 18.1959229 0.0417716 494.2607 0.9315526 13071406 -1.00e-05 -0.0000239 0.0163459 0.0189812 11.086580 8.757262e+05 1094.9844 250 0.2387125 0.0373257 640.0788 135.1066284 9.9732132 775.1854 1.4466448 4051191 2.68e-05 0.0000057 0.1316210 0.0373257 9.313171 2.500000e+05 891.3756 251 3.1650167 0.0582976 684.5450 215.0700684 -19.3383141 899.6151 3.7874835 4600123 -2.19e-05 0.0000176 0.2033956 0.0594618 9.740731 5.176125e+05 842.3275 252 0.1539084 0.0217563 553.8563 7.6044312 -7.4368749 561.4608 0.2105589 24969802 -2.20e-06 -0.0000008 0.0071202 0.0038663 14.131175 3.025714e+06 1060.4108 253 6.2590008 0.0407595 614.0309 25.7367554 -18.7392502 639.7676 1.8140815 15211728 -2.40e-05 -0.0000230 0.0248460 0.0158342 13.523189 6.052029e+06 1010.1155 254 2.0339530 0.0081791 460.8545 4.9682007 15.8772182 465.8227 0.0549816 21630954 -5.60e-06 -0.0000325 0.0044452 0.0027241 12.262402 3.865949e+05 1112.6747 255 5.7070222 0.0487912 637.5989 100.5481567 -2.9298675 738.1470 1.0949419 4319914 -2.62e-05 -0.0000289 0.0927706 0.0285844 9.750674 3.394846e+05 983.2888 256 1.4888390 0.0328744 580.4739 213.2171021 9.9960365 793.6910 1.4115435 5959184 3.90e-06 0.0000312 0.1893965 0.0345427 9.581040 2.699700e+05 912.5541 257 2.9261842 0.0456825 504.0232 0.0000000 -18.9457607 504.0232 3.6356049 18267958 -2.14e-05 -0.0000010 0.0000000 0.0164082 15.109840 3.564255e+07 1184.2876 258 3.1759019 0.0350546 537.5117 217.7036133 -3.3054497 755.2153 1.2761049 5316965 2.79e-05 0.0000475 0.2174722 0.0282978 10.176279 3.843625e+05 783.3606 259 0.1313870 0.0552536 501.1670 57.0498352 -5.3928800 558.2169 14.3132887 5396011 -1.34e-05 0.0000003 0.0548282 0.0521164 13.624661 2.418783e+07 983.4706 260 2.7316747 0.1100575 447.5252 180.8121033 11.3664055 628.3373 12.5935574 933067 4.47e-05 0.0000407 0.1645338 0.1126272 10.031657 1.691613e+06 918.1237 261 2.1872492 0.1020515 598.5491 186.9020386 -2.6143923 785.4511 5.9461098 9659126 -1.16e-05 -0.0000257 0.2007699 0.0745255 9.909063 1.046691e+06 744.0247 262 3.3050435 0.0772666 389.1741 42.8068542 -17.9812279 431.9810 3.5073516 6945239 -2.10e-05 -0.0000119 0.0370180 0.0709730 8.796840 2.701978e+05 1113.5720 263 3.7477736 0.0490266 312.3352 49.7763672 -3.2326088 362.1115 5.9523091 7687697 -5.40e-06 -0.0000006 0.0397024 0.0610658 10.757839 1.999318e+06 1203.9609 264 5.8797941 0.0233590 419.2320 126.2909241 -5.9968710 545.5229 0.7611175 2356464 -1.04e-05 -0.0000022 0.1124241 0.0233590 9.699438 2.500000e+05 997.0525 265 0.5997809 0.0020718 312.6137 2.8774719 -3.2154458 315.4912 0.0583428 31157796 -1.50e-06 -0.0000011 0.0022743 0.0021020 13.512612 1.079055e+06 1262.3547 266 1.1262323 0.1512970 513.6517 93.0666504 -13.6733532 606.7184 11.1257133 2019027 -3.43e-05 -0.0000398 0.0913323 0.1697887 7.980660 3.340584e+05 925.9227 267 2.4886601 0.0419534 330.9816 36.6696167 7.0230460 367.6512 4.2612963 10583081 1.42e-05 -0.0000038 0.0297245 0.0528026 10.540045 1.400252e+06 1196.9796 268 2.9577181 0.0370231 329.9020 0.0000000 11.2650299 329.9020 11.0781183 44833416 5.70e-06 -0.0000261 0.0000000 0.0138967 18.601353 9.706610e+08 1248.8938 269 2.8375022 0.0328551 327.9011 5.6450806 1.7880259 333.5461 0.6686443 21435456 2.50e-06 -0.0000084 0.0044640 0.0109030 12.613762 2.054760e+06 1258.9403 270 1.0583159 0.0398316 373.8363 12.3865967 -36.1496735 378.1957 2.3610826 9008223 -6.50e-06 0.0000047 0.0105941 0.0168604 13.915173 1.268518e+07 1156.8108 271 0.9322934 0.0468024 343.7322 9.6106873 -1.6000985 353.3429 3.0464876 23240840 -5.00e-07 -0.0000244 0.0077776 0.0363120 11.292027 2.037458e+06 1226.0795 272 3.9269907 0.0350872 311.6323 0.0000916 -5.0474648 305.5102 0.0003087 35399760 -2.60e-06 -0.0000144 0.0000001 0.0000020 23.787418 1.514361e+10 1236.5005 273 5.7543297 0.0345887 345.2795 9.2392883 -25.9180870 354.5188 0.9558230 45151364 -6.50e-06 0.0000154 0.0075853 0.0236483 10.216588 4.425093e+05 1208.8158 274 0.6577826 0.0165050 352.4015 175.2011108 11.0855179 527.6026 0.4718578 4248784 1.91e-05 0.0000165 0.1421374 0.0165050 9.980199 2.500000e+05 1057.4170 275 2.5984280 0.1435135 381.3238 113.9295959 -1.6743664 495.2534 7.7457023 4698559 -4.19e-05 -0.0000782 0.0987924 0.1041623 9.148223 6.744113e+05 1039.2928 276 NA 0.0090858 311.6484 -0.0010071 20.7552757 305.8179 0.0000000 35409160 8.50e-06 -0.0000017 -0.0000008 0.0000000 24.439259 2.839498e+10 1233.2993 277 5.1151824 0.0597004 357.0955 86.8029480 2.3721509 443.8985 4.2398844 5890493 1.48e-05 -0.0000108 0.0708415 0.0731015 9.145505 4.502294e+05 1138.5099 278 1.5893495 0.0026678 311.6640 -0.0012817 19.2195740 309.2482 0.1238878 33475094 2.00e-06 -0.0000006 -0.0000010 0.0001842 24.049967 1.417907e+10 1230.1896 279 4.3595552 0.0272923 325.9868 9.8588257 -7.0028462 335.7126 0.3650776 47015672 -7.20e-06 -0.0000125 0.0080422 0.0054195 14.071792 4.495572e+06 1216.0282 280 5.9763045 0.0210300 360.6233 77.1538391 7.2080526 437.7771 1.5876853 7066355 5.40e-06 0.0000095 0.0637890 0.0243997 11.352305 1.304532e+06 1132.3621 281 0.8573329 0.0043097 314.5449 8.7010803 -0.3690335 323.2460 0.0832206 37591464 -6.00e-07 -0.0000014 0.0071113 0.0043310 11.328163 2.539254e+05 1214.8505 282 1.6665773 0.0323149 408.5267 81.0752258 3.4861221 489.6020 1.2909887 5994325 -1.20e-06 -0.0000035 0.0686844 0.0329227 9.561972 2.553754e+05 1099.3270 283 1.0653715 0.0022306 321.2417 9.0560303 9.4712629 330.2977 0.0809368 41410204 7.00e-07 0.0000001 0.0074140 0.0030230 12.786618 7.342363e+05 1212.4133 284 1.5498948 0.0132680 315.1377 0.0443115 9.1459770 315.1820 0.5591200 38846460 4.20e-06 -0.0000095 0.0000363 0.0131656 11.365131 5.796166e+05 1219.0415 285 0.9260806 0.0294345 385.8515 87.9745789 16.0797234 473.8261 1.0015531 12336873 9.70e-06 0.0000080 0.0746546 0.0294345 9.403262 2.500000e+05 1090.4470 286 0.0370776 0.0258187 408.8651 0.5224304 -54.9695892 409.3875 2.6188071 26198200 -2.25e-05 -0.0000047 0.0004439 0.0093561 16.677107 8.479550e+07 1176.3275 287 4.7861953 0.1046766 367.9671 62.6986389 -0.6526507 430.6658 7.0564413 6014227 7.00e-06 0.0000027 0.0541598 0.0712607 10.527358 1.426677e+06 1094.9611 288 0.4292768 0.0285943 365.2354 46.4255981 -9.4552326 411.6610 3.3958178 36735084 -2.05e-05 0.0000000 0.0389758 0.0374228 11.435380 2.296172e+06 1144.7129 289 0.7673782 0.0320601 405.1554 48.9249268 3.0057271 454.0804 1.3730307 10813427 4.10e-06 -0.0000081 0.0416314 0.0315554 9.896261 4.431221e+05 1126.2682 290 2.8939526 0.0106069 333.0764 8.2748413 -4.7707438 341.3512 0.0388033 36267092 -1.20e-06 -0.0000016 0.0068130 0.0019300 12.855759 4.489074e+05 1206.2843 291 2.0894802 0.0388121 374.6116 53.2908630 3.4914296 427.9024 1.4638753 37895364 5.00e-06 -0.0000156 0.0450224 0.0370263 9.376992 2.984946e+05 1130.3613 292 3.8672376 0.0273431 329.6507 26.0717773 -19.5631504 355.7225 1.7790630 23850142 -6.80e-06 0.0000168 0.0214615 0.0294501 10.837351 1.058091e+06 1188.7429 293 2.0235631 0.0262687 404.1501 83.6476135 8.7460480 487.7977 0.9892258 5407213 3.40e-06 -0.0000024 0.0714268 0.0264329 9.829383 3.281677e+05 1087.4485 294 5.1068153 0.0041811 318.7838 3.7287903 -3.1722131 322.5126 0.0687538 41424516 -2.00e-07 -0.0000010 0.0030766 0.0036706 11.553903 2.500000e+05 1208.2504 295 3.3221855 0.0024824 318.1884 0.8097839 -9.2063131 318.9982 0.0152457 41766672 0.00e+00 0.0000000 0.0006671 0.0011075 12.880982 2.530154e+05 1213.0762 296 1.1817948 0.0265178 350.3470 2.5467834 -1.2200981 352.8937 0.0775257 28072192 -1.70e-06 -0.0000192 0.0021180 0.0024742 13.530375 1.213493e+06 1199.8973 297 6.1442108 0.0225864 338.3526 80.2185364 -6.1125450 418.5712 0.7639796 19692434 -4.90e-06 -0.0000016 0.0666632 0.0222994 9.906095 2.524343e+05 1123.1223 298 1.4508719 0.0395412 377.0728 58.3180237 35.8902550 435.3909 2.9711459 6140913 2.28e-05 0.0000017 0.0493005 0.0455515 10.266127 7.287490e+05 1124.5908 299 2.8245804 0.0294298 434.9175 16.7626343 -15.3329592 451.6801 5.0184517 8011175 -1.53e-05 -0.0000038 0.0144723 0.0403689 12.089800 4.537448e+06 1141.4974 300 5.7868400 0.0391004 373.6391 49.6718445 9.6533585 423.3110 1.9342201 26251616 9.30e-06 0.0000133 0.0423954 0.0422328 9.514456 3.882107e+05 1121.9606 301 1.4800488 0.0343777 380.6569 59.4610596 3.7438395 440.1180 2.0046475 13955069 -4.10e-06 -0.0000086 0.0509214 0.0359285 10.290842 5.752881e+05 1108.2422 302 2.0585692 0.0264874 382.3417 5.2873840 -8.6284599 387.6291 0.5196146 21703370 -4.20e-06 -0.0000079 0.0044894 0.0059489 14.558105 8.450985e+06 1172.4481 303 4.2950392 0.0319944 379.7975 71.7590637 6.0672054 451.5566 1.1560996 24227254 1.11e-05 -0.0000026 0.0616437 0.0315041 9.473256 2.704420e+05 1092.3357 304 1.7185161 0.0302136 424.5866 69.9255676 8.3657217 494.5121 1.3356496 5623618 6.10e-06 0.0000116 0.0606496 0.0321455 9.748511 3.129356e+05 1083.0179 305 3.9584420 0.0297578 403.4018 19.2138062 -10.2802114 422.6156 0.2550426 9798272 -2.10e-06 0.0000089 0.0167796 0.0030633 15.599713 1.289244e+07 1125.8589 306 3.5767550 0.0538813 401.0066 88.8211670 -15.5327320 489.8278 2.2438462 5797071 -1.05e-05 0.0000082 0.0767548 0.0538813 8.850667 2.500000e+05 1068.3859 307 3.3773143 0.0518283 343.7562 78.4984741 0.3278200 422.2547 3.9533837 4166312 7.20e-06 0.0000229 0.0660514 0.0701885 9.143332 3.964212e+05 1109.9462 308 1.9529816 0.0233103 411.9419 93.6799011 23.0334778 505.6218 0.8039615 5271857 1.70e-06 0.0000190 0.0813599 0.0238567 9.746747 2.653577e+05 1057.7465 309 1.0198419 0.0320270 373.8167 18.1132507 12.8461714 391.9299 0.8382998 9417522 4.10e-06 -0.0000084 0.0155490 0.0211133 10.370479 4.633404e+05 1146.7994 310 3.3498497 0.0347173 392.4326 24.7784729 8.6248407 417.2111 2.2132897 9632746 4.40e-06 -0.0000005 0.0214842 0.0391554 10.172898 6.078402e+05 1128.5552 311 4.7124381 0.0268604 414.0009 41.2359314 -45.8984375 449.3200 10.8053122 4580521 -1.05e-05 -0.0000192 0.0360917 0.0409518 13.946174 2.334821e+07 1101.2974 312 1.5580069 0.0774138 373.2288 58.3240356 -2.6912863 431.5528 3.7250218 10407621 -3.20e-06 0.0000003 0.0500315 0.0710138 8.944929 2.762238e+05 1107.4227 313 5.4409776 0.0445295 404.8543 165.0777283 -7.6068397 569.9320 1.8766335 3497986 -2.80e-06 0.0000125 0.1496257 0.0460664 9.069694 2.827442e+05 938.1934 314 3.3008642 0.1118476 350.8338 114.7787476 6.4261456 465.6125 6.3101029 5069278 2.29e-05 0.0000305 0.0992126 0.1034139 8.666373 3.451610e+05 1042.1176 315 1.4400885 0.0068443 401.9545 13.1899719 -0.4702837 415.1445 0.1754715 14974216 -9.00e-07 -0.0000041 0.0117836 0.0070146 11.143725 2.719940e+05 1106.1604 316 2.6907213 0.0162341 442.0473 130.3380737 50.9975243 572.3854 0.4694458 5937160 3.92e-05 0.0000021 0.1200282 0.0136793 10.765446 4.326945e+05 955.5574 317 3.6168063 0.0315609 310.8580 57.1759949 -13.3556309 368.0340 1.0686938 7260449 -5.70e-06 0.0000293 0.0478910 0.0145417 12.562228 2.796399e+06 1136.7015 318 1.7721144 0.0052579 411.1426 63.3243103 -3.8661056 474.4669 0.0188706 5864252 1.00e-06 0.0000164 0.0568570 0.0012435 12.921738 3.000964e+05 1050.4230 319 4.4074984 0.0193537 408.5789 48.4671021 -6.1330667 457.0460 0.6366290 13471446 -1.24e-05 -0.0000047 0.0433716 0.0126815 11.848929 1.112778e+06 1069.0170 320 4.2075830 0.0176322 443.1326 86.1841431 12.8542957 529.3168 0.1132470 4350826 1.61e-05 0.0000271 0.0789177 0.0040810 12.350964 6.410441e+05 1005.8926 321 0.3940128 0.0129430 417.1843 34.8763123 24.1077709 452.0606 0.2793030 11980740 1.58e-05 0.0000076 0.0312920 0.0101134 10.750885 3.085303e+05 1079.6692 322 4.0617018 0.0101842 295.4418 33.5981750 -0.0986546 329.0400 0.2275746 10337817 1.50e-06 -0.0000105 0.0277441 0.0077921 11.347039 4.625406e+05 1177.4059 323 1.2054230 0.0221615 304.1122 61.3278503 33.7436752 365.4400 0.8547414 6270944 2.48e-05 0.0000111 0.0508863 0.0191413 10.835736 6.279414e+05 1143.8651 324 2.9422362 0.0667855 429.3797 138.9470520 67.5464096 568.3267 3.6781981 2867567 3.79e-05 0.0000443 0.1256415 0.0705697 8.939951 3.177699e+05 966.9543 325 1.4431311 0.0275921 395.0110 10.3090515 6.7359524 405.3200 1.4179286 7208180 7.50e-06 -0.0000202 0.0091614 0.0194761 12.027444 1.823387e+06 1114.9631 326 1.8318641 0.0241384 414.5231 30.7442932 16.0769787 445.2674 1.7177018 14602073 1.92e-05 0.0000032 0.0276528 0.0268306 11.145473 1.137585e+06 1081.0516 327 3.6635244 0.0304742 268.5699 40.5500793 2.7787406 309.1200 0.6967074 10768462 1.75e-05 0.0000160 0.0329330 0.0178096 10.631125 5.034690e+05 1190.7389 328 0.3342191 0.0225697 423.8070 11.5087891 8.1416149 435.3158 0.7485024 20814114 6.90e-06 -0.0000010 0.0104184 0.0207088 10.169434 3.439068e+05 1093.1564 329 1.5593089 0.0065369 370.9563 74.8837280 -42.0582619 445.8400 0.0926008 5995710 -1.17e-05 -0.0000008 0.0654060 0.0034802 12.524646 4.840523e+05 1070.0225 330 2.8873963 0.0121421 327.2518 48.5842896 -9.3623762 375.8361 0.4122616 7595339 -4.90e-06 0.0000029 0.0410955 0.0081734 12.629429 1.521933e+06 1133.6447 331 1.4493849 0.0317811 345.8135 19.2011108 -9.5260048 365.0146 7.3057508 5286377 -3.20e-06 -0.0000066 0.0164681 0.0250804 15.051330 4.807216e+07 1146.7543 332 2.3094857 0.0039922 398.1082 46.3889465 -11.7856216 444.4972 0.0237033 19577646 -4.90e-06 -0.0000026 0.0413690 0.0014771 12.760317 3.632004e+05 1074.9572 333 4.9947395 0.0339115 424.6793 30.3173523 38.8196487 454.9966 3.8403807 11229707 1.48e-05 0.0000105 0.0274660 0.0432207 11.130878 1.828470e+06 1073.4968 334 1.3712677 0.0299273 304.1875 86.3724670 10.1909161 390.5600 1.4645642 6853189 3.40e-06 -0.0000058 0.0718553 0.0330846 9.856502 3.720996e+05 1115.6613 335 2.8796389 0.0486747 293.0000 0.0000000 -5.4007034 293.0000 15.3985491 5898558 7.40e-06 0.0000035 0.0000000 0.0315047 15.946224 1.625288e+08 1210.6652 336 6.2598667 0.0281482 293.5083 19.7316589 -10.5386744 313.2400 1.4714558 12470167 -5.90e-06 -0.0000033 0.0163044 0.0308698 10.162689 4.093885e+05 1190.4697 337 0.8019695 0.0430367 390.0986 39.8400879 -28.7221737 429.9387 1.2018919 8904691 -2.80e-06 -0.0000278 0.0355077 0.0250125 10.550935 6.759058e+05 1082.1726 338 4.1139579 0.0278110 422.6501 1.1092529 -16.6053028 422.1921 0.2489745 25430700 -1.90e-05 -0.0000154 0.0010127 0.0019414 17.477892 5.254351e+07 1094.1910 339 2.7905071 0.0091433 316.3464 1.3756409 -18.5778313 317.1600 1.2064096 36850112 -5.60e-06 -0.0000102 0.0011540 0.0073243 15.779985 3.350427e+07 1190.7104 340 0.8121135 0.0143237 389.5445 49.4335022 -31.2736912 434.7037 0.5196902 15207513 -3.00e-06 -0.0000020 0.0440043 0.0076469 13.491356 3.908805e+06 1073.9458 341 1.5712389 0.0303363 442.1251 15.0446167 22.0060616 452.9889 0.9384912 9798053 8.60e-06 -0.0000143 0.0139250 0.0063439 15.762863 2.224587e+07 1065.3601 342 0.7165681 0.0196909 306.8919 78.5992737 23.1158810 385.4912 1.0493386 14079120 1.63e-05 0.0000064 0.0654889 0.0236146 10.455995 5.790263e+05 1121.5930 343 2.9996293 0.0129644 311.0177 57.1249695 -1.1237273 368.1427 1.6552866 8762238 1.60e-06 -0.0000011 0.0477261 0.0105905 15.003557 1.965581e+07 1139.8094 344 3.2424917 0.0150626 304.2055 48.8230591 2.8778739 353.0286 0.5871220 10180995 4.00e-06 0.0000015 0.0405821 0.0088408 13.179790 2.564778e+06 1154.2452 345 0.6110631 0.0200919 354.8913 104.6942139 29.9164944 459.5855 0.6697589 5919100 6.20e-06 0.0000018 0.0903933 0.0200749 10.023645 3.153393e+05 1053.5138 346 5.3 Work with vector data Two type of data exist in the G.I.S. world raster and vector. if we already saw the first one quickly with covariates of Germany here is an example of importing either ESRI Shapefile or .GPKG files into R and handling them the package sf and sp are useful to manage vector data. To import a shapefile st_read(\"./file_location/yourfile.shp\") command can be used and add the , layer = \"layer_name\" parameter when importing a gpkg file. #Import the area shapefile # install.packages(sf, mapview) library(sf) library(mapview) Area = st_read(&quot;./Data/Example_Irak/Area.shp&quot;) plot(Area) mapview(Area) 5.3.1 Coordinate systems You can also check the coordinate system with crs() (Raster) or st_crs() (Vector) set one if their is none proj4string(vector) &lt;- CRS() or transformed it with st_transform(vector, new_crs)) from sf package for vector or using project(raster, new_crs) for raster layers. library(raster) st_crs(Area) ## Coordinate Reference System: ## User input: WGS 84 / UTM zone 38N ## wkt: ## PROJCRS[&quot;WGS 84 / UTM zone 38N&quot;, ## BASEGEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4326]], ## CONVERSION[&quot;UTM zone 38N&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,45, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,500000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## ID[&quot;EPSG&quot;,32638]] # Transformed it into WG84 Area_WGS84 &lt;- st_transform(Area, CRS(&quot;+init=epsg:4326&quot;)) ## Warning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is ## deprecated. It might return a CRS with a non-EPSG compliant axis order. st_crs(Area_WGS84) ## Coordinate Reference System: ## User input: GEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;, ## ID[&quot;EPSG&quot;,1166]], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;, ## ID[&quot;EPSG&quot;,1152]], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;, ## ID[&quot;EPSG&quot;,1153]], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;, ## ID[&quot;EPSG&quot;,1154]], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;, ## ID[&quot;EPSG&quot;,1155]], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;, ## ID[&quot;EPSG&quot;,1156]], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;, ## ID[&quot;EPSG&quot;,1309]], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,7030]], ## ENSEMBLEACCURACY[2.0], ## ID[&quot;EPSG&quot;,6326]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8901]], ## CS[ellipsoidal,2], ## AXIS[&quot;longitude&quot;,east, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, ## ID[&quot;EPSG&quot;,9122]]], ## AXIS[&quot;latitude&quot;,north, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, ## ID[&quot;EPSG&quot;,9122]]], ## USAGE[ ## SCOPE[&quot;unknown&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]]] ## wkt: ## GEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;, ## ID[&quot;EPSG&quot;,1166]], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;, ## ID[&quot;EPSG&quot;,1152]], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;, ## ID[&quot;EPSG&quot;,1153]], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;, ## ID[&quot;EPSG&quot;,1154]], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;, ## ID[&quot;EPSG&quot;,1155]], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;, ## ID[&quot;EPSG&quot;,1156]], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;, ## ID[&quot;EPSG&quot;,1309]], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,7030]], ## ENSEMBLEACCURACY[2.0], ## ID[&quot;EPSG&quot;,6326]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8901]], ## CS[ellipsoidal,2], ## AXIS[&quot;longitude&quot;,east, ## ORDER[1], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, ## ID[&quot;EPSG&quot;,9122]]], ## AXIS[&quot;latitude&quot;,north, ## ORDER[2], ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433, ## ID[&quot;EPSG&quot;,9122]]], ## USAGE[ ## SCOPE[&quot;unknown&quot;], ## AREA[&quot;World.&quot;], ## BBOX[-90,-180,90,180]]] 5.3.2 Resample, crop and mask One major complication of raster data is when using stack raster the overlaying layers must have the same extent and pixel size. One line of command resample(raster to resample , raster with final parameters , method) simplify this process if your data have already a similar CRS. The method parameter can be “bilinear” when dealing with continuous data or “ngb” (nearest neighbor) mostly for discrete data. When your want to crop your covariates to a study area extent you can use the crop(raster, extent) command and for masking the raster or stack raster mask(raster, extent)` library(raster) # Import and check the CRS of the DEM DEM &lt;- stack(&quot;./Data/Example_Irak/Download/DEM_GLO30.tif&quot;) crs(DEM) ## Coordinate Reference System: ## Deprecated Proj.4 representation: ## +proj=utm +zone=38 +datum=WGS84 +units=m +no_defs ## WKT2 2019 representation: ## PROJCRS[&quot;unknown&quot;, ## BASEGEOGCRS[&quot;unknown&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ID[&quot;EPSG&quot;,6326]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8901]]], ## CONVERSION[&quot;UTM zone 38N&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,45, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,500000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]], ## ID[&quot;EPSG&quot;,16038]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1, ## ID[&quot;EPSG&quot;,9001]]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1, ## ID[&quot;EPSG&quot;,9001]]]] proj4string(DEM) &lt;- CRS(&quot;+init=epsg:32638&quot;) crs(DEM) ## Coordinate Reference System: ## Deprecated Proj.4 representation: ## +proj=utm +zone=38 +datum=WGS84 +units=m +no_defs ## WKT2 2019 representation: ## PROJCRS[&quot;WGS 84 / UTM zone 38N&quot;, ## BASEGEOGCRS[&quot;WGS 84&quot;, ## ENSEMBLE[&quot;World Geodetic System 1984 ensemble&quot;, ## MEMBER[&quot;World Geodetic System 1984 (Transit)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G730)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G873)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1150)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1674)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G1762)&quot;], ## MEMBER[&quot;World Geodetic System 1984 (G2139)&quot;], ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]], ## ENSEMBLEACCURACY[2.0]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4326]], ## CONVERSION[&quot;UTM zone 38N&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,45, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,500000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]], ## ID[&quot;EPSG&quot;,16038]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1, ## ID[&quot;EPSG&quot;,9001]]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1, ## ID[&quot;EPSG&quot;,9001]]], ## USAGE[ ## SCOPE[&quot;unknown&quot;], ## AREA[&quot;Between 42°E and 48°E, northern hemisphere between equator and 84°N, onshore and offshore. Armenia. Azerbaijan. Djibouti. Eritrea. Ethiopia. Georgia. Islamic Republic of Iran. Iraq. kazakhstan. Kuwait. Russian Federation. Saudi Arabia. Somalia. Türkiye (Turkey). Yemen.&quot;], ## BBOX[0,42,84,48]]] st_crs(Area) ## Coordinate Reference System: ## User input: WGS 84 / UTM zone 38N ## wkt: ## PROJCRS[&quot;WGS 84 / UTM zone 38N&quot;, ## BASEGEOGCRS[&quot;WGS 84&quot;, ## DATUM[&quot;World Geodetic System 1984&quot;, ## ELLIPSOID[&quot;WGS 84&quot;,6378137,298.257223563, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4326]], ## CONVERSION[&quot;UTM zone 38N&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,0, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,45, ## ANGLEUNIT[&quot;Degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,500000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,0, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## ID[&quot;EPSG&quot;,32638]] # Crop the DEM DEM_crop &lt;- crop(DEM,Area) # Mask the covariates DEM_mask &lt;- mask(DEM_crop, Area) Plot the three different rasters: original, cropped and masked on the same map. mapview(DEM$DEM_GLO30) + mapview(DEM_crop$DEM_GLO30) + mapview(DEM_mask$DEM_GLO30) "],["digital-soil-mapping-regression-model.html", "6 Digital soil mapping regression model 6.1 SCORPAN model and Digital soil mapping (DSM) 6.2 Importing Covariates 6.3 Importing study area and sampling locations 6.4 Extract the raster values at point locations 6.5 Prepare the data set before machine learning training 6.6 Train the linear regression 6.7 Train the decision tree 6.8 Train the Random forest 6.9 Comparing the results 6.10 Create the prediction map 6.11 Tuning the models 6.12 Variables importance", " 6 Digital soil mapping regression model We will explore a full workflow to predict values from soil properties based on covariates. 6.1 SCORPAN model and Digital soil mapping (DSM) Elements: S : Soil at a specific point in space and time: soil classes ( Sc ) or soil attributes ( Sa ). From Jenny’s Equation: c : Climate properties of the environment. o : Organisms, vegetation, biotic factor. r : Topography, landscape attributes. p : Parent material, lithology. a : Age or time factor. Additions: s : Prior knowledge of soil at a point. n : Prior knowledge of soil at a point. ℇ : Prior knowledge of soil at a point. \\(\\\\[0.15cm]\\) \\(f()\\) : Qualitative function \\(f\\) linking S to scorpan factors (McBratney, Mendonça Santos, and Minasny 2003). \\(\\\\[0.25cm]\\) At each soil sample locations the covariates cell will be observed and their value will be retain for the model training. Figure 6.1: SCORPAN and relation with digital mapping. \\(\\\\[0.25cm]\\) Once we have several observation of the covariates a trend can be observed between variable values an samples boservation. It can follow a positive correlation or not. \\(\\\\[0.25cm]\\) Figure 6.2: Covariates relation with soil observations. 6.2 Importing Covariates Figure 6.3: Digital soil mapping steps. # empty memory and workspace rm(list=ls()) # check directory getwd() ## [1] &quot;G:/OneDrive/Ecole/Cours/GEO-77/R_Introduction/Report&quot; # to install all required R packages # install.packages(&quot;pacman&quot;) library(pacman) ## Warning: le package &#39;pacman&#39; a été compilé avec la version R 4.4.1 p_load(&quot;sp&quot;,&quot;raster&quot;,&quot;mapview&quot;,&quot;corrplot&quot;,&quot;randomForest&quot;,&quot;caret&quot;,&quot;rpart&quot;,&quot;rpart.plot&quot;) # Import covariates (Remote Sensing, Terrain, Rainfall, NPP) # import raster layers of covariates (Remote Sensing data) blue = raster(&quot;./Data/DSM/RS/Blue.tif&quot;) green = raster(&quot;./Data/DSM/RS/Green.tif&quot;) red = raster(&quot;./Data/DSM/RS/Red.tif&quot;) nir = raster(&quot;./Data/DSM/RS/Nir.tif&quot;) 6.2.1 Plot the Landsat layers # calculate some Remote Sensing indices such as NDVI ndvi = (nir - red) / (nir + red) # make a stack layer from Remote Sensing data landsat = stack(blue,green,red,nir,ndvi) # set the names to the rasters in the stack file names(landsat) &lt;- c(&quot;blue&quot;,&quot;green&quot;,&quot;red&quot;,&quot;nir&quot;,&quot;ndvi&quot;) # inspect the structure of stack layer landsat ## class : RasterStack ## dimensions : 733, 716, 524828, 5 (nrow, ncol, ncell, nlayers) ## resolution : 500, 500 (x, y) ## extent : 498000, 856000, 5235500, 5602000 (xmin, xmax, ymin, ymax) ## crs : +proj=utm +zone=32 +datum=WGS84 +units=m +no_defs ## names : blue, green, red, nir, ndvi ## min values : 47.5000000, 92.0000000, 19.5000000, 6.0000000, -0.6666667 ## max values : 9.383500e+03, 1.003950e+04, 1.027300e+04, 8.635500e+03, 8.870056e-01 # plot the stack layers of Remote Sensing data plot(landsat) 6.2.2 Stack and plot terrain variables # import the terrain data using list.files command dem_lst &lt;- list.files(&quot;./Data/DSM/Terrain/&quot;, pattern=&quot;\\\\.sdat$&quot;, full.names = TRUE) # inspect the structure of list dem_lst ## [1] &quot;./Data/DSM/Terrain/CNBL.sdat&quot; &quot;./Data/DSM/Terrain/DEM.sdat&quot; ## [3] &quot;./Data/DSM/Terrain/MCA.sdat&quot; &quot;./Data/DSM/Terrain/Slope.sdat&quot; ## [5] &quot;./Data/DSM/Terrain/TWI.sdat&quot; # make a stack layer from terrain data terrain &lt;- stack(dem_lst) # plot the stack layers of terrain data plot(terrain) 6.2.3 Plot and resample all covariates # Re-sampling Remote Sensing data based on terrain data RS_terrain = resample(landsat, terrain, method=&quot;bilinear&quot;) # import mean annual rainfall (mm) rain &lt;- raster(&quot;./Data/DSM/Climate/rainfall.sdat&quot;) # Re-sampling rainfall data based on terrain data rain_terrain = resample(rain, terrain, method=&quot;bilinear&quot;) # import Terra Net Primary Production kg*C/m^2 NPP &lt;- raster(&quot;./Data/DSM/NPP/NPP.sdat&quot;) # Re-sampling NPP based on terrain data NPP_terrain = resample(NPP,terrain, method=&quot;bilinear&quot;) # make a stack file from re-sampled remote sensing data, terrain data, rainfall, and NPP covariates_stack = stack(terrain, RS_terrain, rain_terrain, NPP_terrain) # inspect the structure of stack layer names(covariates_stack) ## [1] &quot;CNBL&quot; &quot;DEM&quot; &quot;MCA&quot; &quot;Slope&quot; &quot;TWI&quot; &quot;blue&quot; ## [7] &quot;green&quot; &quot;red&quot; &quot;nir&quot; &quot;ndvi&quot; &quot;rainfall&quot; &quot;NPP&quot; # plot the stack of covariates plot(covariates_stack) 6.3 Importing study area and sampling locations # import shape file of point data point &lt;- shapefile(&quot;./Data/DSM/Shapefile/points.shp&quot;) # import shape file of Bavaria boundary Bavaria = shapefile(&quot;./Data/DSM/Shapefile/Bavaria.shp&quot;) # plot the point on the raster plot(covariates_stack$DEM, main = &quot;DEM&quot;, xlab = &quot;Easting (m)&quot;, ylab = &quot;Northing (m)&quot;) plot(point,add =T, pch = 19) plot(Bavaria, add =T) # plot an interactive map mapview::mapview(point, zcol = &quot;OC&quot;, at = c(0,5,10,15,20,25,30,35,200), legend = TRUE) \\(\\\\[0.15cm]\\) # inspect the point shape files # types of the spatial data class(point) ## [1] &quot;SpatialPointsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; # summary statistics of data summary(point) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## x 508615.3 848381.1 ## y 5271503.2 5591741.8 ## Is projected: TRUE ## proj4string : ## [+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs] ## Number of points: 346 ## Data attributes: ## x y pH OC ## Min. :508615 Min. :5271503 Min. :3.810 Min. : 6.00 ## 1st Qu.:617164 1st Qu.:5352240 1st Qu.:6.162 1st Qu.: 14.50 ## Median :672285 Median :5406629 Median :6.850 Median : 21.00 ## Mean :676277 Mean :5416121 Mean :6.738 Mean : 28.35 ## 3rd Qu.:733674 3rd Qu.:5485267 3rd Qu.:7.380 3rd Qu.: 33.05 ## Max. :848381 Max. :5591742 Max. :8.140 Max. :251.30 # histogram of SOC hist(point$OC,col =&quot;blue&quot;, xlab= &quot;SOC (g/kg)&quot;, main=&quot;Histogram&quot;) 6.4 Extract the raster values at point locations # extract covariate values at each point of observation cov = extract(covariates_stack, point, method=&#39;bilinear&#39;, df=TRUE) # inspect the data.frame of cov str(cov) ## &#39;data.frame&#39;: 346 obs. of 13 variables: ## $ ID : num 1 2 3 4 5 6 7 8 9 10 ... ## $ CNBL : num 398 431 587 408 535 ... ## $ DEM : num 426 493 600 474 544 ... ## $ MCA : num 6744760 14292214 4667933 5777121 14213043 ... ## $ Slope : num 0.0465 0.0149 0.026 0.0228 0.016 ... ## $ TWI : num 10.5 11.1 13.2 11.3 12 ... ## $ blue : num 236 401 374 375 411 ... ## $ green : num 403 698 599 670 680 ... ## $ red : num 273 680 537 586 544 ... ## $ nir : num 2561 3008 2808 3300 3390 ... ## $ ndvi : num 0.811 0.632 0.663 0.699 0.725 ... ## $ rainfall: num 1105 1039 1105 964 1051 ... ## $ NPP : num 7384 6576 6772 6682 6919 ... # combining covariates and soil properties cov_soil = cbind(cov[,-1], OC=point$OC) # inspect the data.frame of cov_soil str(cov_soil) ## &#39;data.frame&#39;: 346 obs. of 13 variables: ## $ CNBL : num 398 431 587 408 535 ... ## $ DEM : num 426 493 600 474 544 ... ## $ MCA : num 6744760 14292214 4667933 5777121 14213043 ... ## $ Slope : num 0.0465 0.0149 0.026 0.0228 0.016 ... ## $ TWI : num 10.5 11.1 13.2 11.3 12 ... ## $ blue : num 236 401 374 375 411 ... ## $ green : num 403 698 599 670 680 ... ## $ red : num 273 680 537 586 544 ... ## $ nir : num 2561 3008 2808 3300 3390 ... ## $ ndvi : num 0.811 0.632 0.663 0.699 0.725 ... ## $ rainfall: num 1105 1039 1105 964 1051 ... ## $ NPP : num 7384 6576 6772 6682 6919 ... ## $ OC : num 17.8 18 27.7 12.5 31.5 ... # check the correlation covariates and OC corrplot.mixed(cor(cov_soil), lower.col = &quot;black&quot;, number.cex = .7) 6.5 Prepare the data set before machine learning training createDataPartition command to divide the data set into a p = split. It will create an index from which you will need to select the row belonging or not to the value. set.seed allow you to create a specific randomness. Useful to reproduce an experiment. # remove na values cov_soil &lt;- cov_soil[complete.cases(cov_soil),] # remove high values of oc cov_soil &lt;- cov_soil[cov_soil$OC&lt;78,] # check number of rows nrow(cov_soil) ## [1] 336 # check number of column ncol(cov_soil) ## [1] 13 # split the data to training (80%) and testing (20%) sets set.seed(1234) trainIndex &lt;- createDataPartition(cov_soil$OC, p = 0.8, list = FALSE, times = 1) # subset the datasets cov_soil_Train &lt;- cov_soil[ trainIndex,] cov_soil_Test &lt;- cov_soil[-trainIndex,] # inspect the two datasets str(cov_soil_Train) ## &#39;data.frame&#39;: 271 obs. of 13 variables: ## $ CNBL : num 431 587 535 414 403 ... ## $ DEM : num 493 600 544 466 408 ... ## $ MCA : num 14292214 4667933 14213043 18620790 22964809 ... ## $ Slope : num 0.01492 0.02598 0.01596 0.00466 0.00203 ... ## $ TWI : num 11.1 13.2 12 13 14.1 ... ## $ blue : num 401 374 411 472 489 ... ## $ green : num 698 599 680 810 806 ... ## $ red : num 680 537 544 783 797 ... ## $ nir : num 3008 2808 3390 3573 3300 ... ## $ ndvi : num 0.632 0.663 0.725 0.64 0.611 ... ## $ rainfall: num 1039 1105 1051 984 931 ... ## $ NPP : num 6576 6772 6919 6549 6491 ... ## $ OC : num 18 27.7 31.5 12.4 17 72.8 15.2 30.7 17.4 20.2 ... str(cov_soil_Test) ## &#39;data.frame&#39;: 65 obs. of 13 variables: ## $ CNBL : num 398 408 420 422 485 ... ## $ DEM : num 426 474 485 502 496 ... ## $ MCA : num 6744760 5777121 21438967 7046277 11136973 ... ## $ Slope : num 0.0465 0.0228 0.0103 0.0194 0.0192 ... ## $ TWI : num 10.5 11.3 11.3 10.4 14.1 ... ## $ blue : num 236 375 421 317 353 ... ## $ green : num 403 670 742 580 613 ... ## $ red : num 273 586 690 512 482 ... ## $ nir : num 2561 3300 3420 2784 3538 ... ## $ ndvi : num 0.811 0.699 0.666 0.693 0.758 ... ## $ rainfall: num 1105 964 983 928 972 ... ## $ NPP : num 7384 6682 6859 6529 7115 ... ## $ OC : num 17.8 12.5 36.1 19.1 57.1 41.1 15 20.1 14.9 37.7 ... 6.6 Train the linear regression Figure 6.4: Linear regression schema. lm(y ~ X, data = df) create a linear regression between y variables and X predictors (several columns) from the chosen data frame df. predict(model, test) predict the test values based on the train model. They need to have the same format (ncol, and colnames) as the training data. # fit a linear regression on training set set.seed(1234) linear_fit &lt;- lm(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data=cov_soil_Train) # look at the summary of linear model summary(linear_fit) ## ## Call: ## lm(formula = OC ~ CNBL + DEM + MCA + Slope + TWI + blue + green + ## red + nir + ndvi + rainfall + NPP, data = cov_soil_Train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -22.735 -7.836 -1.557 6.239 49.203 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.693e+02 5.694e+01 2.973 0.003225 ** ## CNBL -2.573e-02 2.026e-02 -1.270 0.205214 ## DEM 5.678e-02 1.928e-02 2.945 0.003526 ** ## MCA 2.969e-07 8.091e-08 3.670 0.000295 *** ## Slope -7.782e+01 4.139e+01 -1.880 0.061228 . ## TWI 1.317e+00 3.987e-01 3.305 0.001085 ** ## blue 7.050e-02 4.455e-02 1.583 0.114753 ## green -3.596e-02 5.618e-02 -0.640 0.522727 ## red -1.473e-01 3.888e-02 -3.790 0.000188 *** ## nir 2.749e-02 8.490e-03 3.237 0.001365 ** ## ndvi -2.306e+02 8.539e+01 -2.701 0.007369 ** ## rainfall -2.693e-02 1.032e-02 -2.611 0.009567 ** ## NPP 5.853e-04 3.201e-03 0.183 0.855045 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 11.51 on 258 degrees of freedom ## Multiple R-squared: 0.443, Adjusted R-squared: 0.4171 ## F-statistic: 17.1 on 12 and 258 DF, p-value: &lt; 2.2e-16 # apply the linear model on testing data OC_linear_Pred &lt;- predict(linear_fit, cov_soil_Test) # check the plot actual and predicted OC values plot(cov_soil_Test$OC, OC_linear_Pred, main=&quot;Linear model&quot;, col=&quot;blue&quot;,xlab=&quot;Actual OC&quot;, ylab=&quot;Predicted OC&quot;, xlim=c(0,100),ylim=c(0,100)) # Create a line of 1/1 showing the &quot;perfect&quot; prediction rate abline(coef = c(0,1), col=&quot;red&quot; ) # calculate correlation cor_linear &lt;- cor(cov_soil_Test$OC, OC_linear_Pred) cor_linear ## [1] 0.4996546 # calculate RMSE RMSE_linear &lt;- sqrt(mean((cov_soil_Test$OC - OC_linear_Pred)^2)) RMSE_linear ## [1] 11.30482 6.7 Train the decision tree Figure 6.5: Decision tree schema (Alpaydin 2014). rpart(y ~ X, method = \"\", data = df) create a decision tree for the y variables and X predictors (several columns) from the chosen data frame df. The method parameter is by default “anova” but it can be change to “poisson” in case of discrete values. For classification problems the method can be set to “class”. # fit decision tree model on training set set.seed(1234) tree_fit &lt;- rpart(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, method=&quot;anova&quot;, data=cov_soil_Train) # display the results of decision tree printcp(tree_fit) ## ## Regression tree: ## rpart(formula = OC ~ CNBL + DEM + MCA + Slope + TWI + blue + ## green + red + nir + ndvi + rainfall + NPP, data = cov_soil_Train, ## method = &quot;anova&quot;) ## ## Variables actually used in tree construction: ## [1] blue CNBL DEM green MCA ndvi NPP red Slope TWI ## ## Root node error: 61351/271 = 226.39 ## ## n= 271 ## ## CP nsplit rel error xerror xstd ## 1 0.189128 0 1.00000 1.01112 0.104709 ## 2 0.068565 1 0.81087 0.84893 0.097943 ## 3 0.061621 2 0.74231 0.83187 0.096378 ## 4 0.043476 3 0.68069 0.81398 0.094965 ## 5 0.034078 4 0.63721 0.80606 0.095067 ## 6 0.033352 5 0.60313 0.80303 0.094535 ## 7 0.030887 6 0.56978 0.80303 0.094535 ## 8 0.025692 7 0.53889 0.84399 0.099558 ## 9 0.011202 8 0.51320 0.79923 0.091556 ## 10 0.010799 10 0.49080 0.76902 0.083771 ## 11 0.010465 11 0.48000 0.76902 0.083771 ## 12 0.010000 12 0.46953 0.76559 0.083593 # visualize cross-validation results plotcp(tree_fit) # visualize the tree rpart.plot(tree_fit) # apply the tree model on testing data OC_tree_Pred &lt;- predict(tree_fit, cov_soil_Test) # check the plot actual and predicted OC values plot(cov_soil_Test$OC, OC_tree_Pred, main=&quot;Tree model&quot;, col=&quot;blue&quot;,xlab=&quot;Actual OC&quot;, ylab=&quot;Predicted OC&quot;, xlim=c(0,100),ylim=c(0,100)) abline(coef = c(0,1), col=&quot;red&quot; ) # calculate correlation cor_tree &lt;- cor(cov_soil_Test$OC, OC_tree_Pred) cor_tree ## [1] 0.4036307 # calculate RMSE RMSE_tree &lt;- sqrt(mean((cov_soil_Test$OC - OC_tree_Pred)^2)) RMSE_tree ## [1] 12.02823 6.8 Train the Random forest The random forest will produce several single decision trees and aggregate the results. Figure 6.6: Random forest model. randomForest(y ~ X, data = df) create a decision y variables and X predictors (several columns) from the chosen data frame df. # fit random forest model on training set set.seed(1234) rf_fit &lt;- randomForest(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data=cov_soil_Train, ntree=500, do.trace = 25) ## | Out-of-bag | ## Tree | MSE %Var(y) | ## 25 | 149.4 65.98 | ## 50 | 145.5 64.25 | ## 75 | 143.2 63.27 | ## 100 | 146.4 64.68 | ## 125 | 146.4 64.67 | ## 150 | 144.8 63.97 | ## 175 | 143.9 63.58 | ## 200 | 143.4 63.34 | ## 225 | 143.3 63.29 | ## 250 | 143.6 63.44 | ## 275 | 144 63.61 | ## 300 | 144.1 63.67 | ## 325 | 143.7 63.49 | ## 350 | 143.7 63.48 | ## 375 | 143.5 63.40 | ## 400 | 143.2 63.26 | ## 425 | 143 63.17 | ## 450 | 142.9 63.14 | ## 475 | 143 63.15 | ## 500 | 142.9 63.12 | # visualize the importance of random forest varImpPlot(rf_fit) # apply the random forest model on testing data OC_rf_Pred &lt;- predict(rf_fit, cov_soil_Test) # check the plot actual and predicted OC values plot(cov_soil_Test$OC, OC_rf_Pred, main=&quot;Tree model&quot;, col=&quot;blue&quot;,xlab=&quot;Actual OC&quot;, ylab=&quot;Predicted OC&quot;, xlim=c(0,100),ylim=c(0,100)) abline(coef = c(0,1), col=&quot;red&quot; ) # calculate correlation cor_rf &lt;- cor(cov_soil_Test$OC, OC_rf_Pred) cor_rf ## [1] 0.6036493 # calculate RMSE RMSE_rf &lt;- sqrt(mean((cov_soil_Test$OC - OC_rf_Pred)^2)) RMSE_rf ## [1] 9.617122 6.9 Comparing the results We have to compare the different results of the models with RMSE and R² values. # check the accuracy of three models RMSE_models &lt;- c(Linear=RMSE_linear,Tree=RMSE_tree,RF=RMSE_rf) cor_models &lt;- c(Linear=cor_linear,Tree=cor_tree,RF=cor_rf) # plot the final results par(mfrow=c(1,2)) barplot(RMSE_models, main=&quot;RMSE&quot;,col=c(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;)) barplot(cor_models, main=&quot;Correlation&quot;,col=c(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;)) par(mfrow=c(1,1)) 6.10 Create the prediction map We are choosing the model with the best performances (RF). When predicting you do not need to set a seed. # apply the best model on the stack layer map_rf &lt;- raster::predict(covariates_stack, rf_fit) # plot the final map spplot(map_rf, main=&quot;SOC map based on RF model&quot;) # plot an interactive map mapview::mapview(map_rf) 6.11 Tuning the models A model can be improved in many ways, but if you cannot obtain better training data or covariates, tuning the model is always a good option. By tuning the model, you will choose the best parameters for your dataset. Careful, however, not to overfit your model specifically to your data, in which case it could not be reusable afterwards. The caret package is often used because it allows the deployment of a variety of machine learning commands. 6.11.1 Setting the general training parameters To have a better model, you can create a cross-validation. It will take a small set of your data every time and use it as a testing set while using the remaining part. To create a cross-validation, you need to set the trainControl(method = \"cv\", number = x) parameter before running your model. X will represent the number of folds you want to perform. Figure 6.7: Cross validation fold schema. Once the train control is set, you can create the training of the function with train(y ~ X, data =, method = \"\", trControl =, tuneGrid/tuneLength =, control =: y will be the column name of the data you want to predict, and X will be the predictors (you can replace it with a .). The data is your training df. method = \"\" is the model you want to chose. You can look to all caret package model on the webpage https://topepo.github.io/caret/available-models.html. trControl = correspond to the trainControl() parameters we set earlier. -tuneGrid = is the tuning parameters of your model. You create a matrix of your tuning values with expand.grid function. For each model, the tuning variables have specific names. You can also use tuneLength, which randomly creates a grid of the number you set root square, the number of tuning parameters for this model (not recommended). You can also set a sequence of several numbers in your grid. control an additional command for extra control parameters. #First control parameters ctrl1 &lt;- trainControl(method = &quot;cv&quot;, number = 5) set.seed(1234) tree_fit1 &lt;- train(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data = cov_soil_Train, method = &quot;rpart&quot;, trControl = ctrl1) # display the results of decision tree tree_fit1 ## CART ## ## 271 samples ## 12 predictor ## ## No pre-processing ## Resampling: Cross-Validated (5 fold) ## Summary of sample sizes: 215, 217, 217, 218, 217 ## Resampling results across tuning parameters: ## ## cp RMSE Rsquared MAE ## 0.06162053 13.80990 0.19138312 10.31556 ## 0.06856500 13.90378 0.18603785 10.39489 ## 0.18912794 14.63942 0.09680234 11.41884 ## ## RMSE was used to select the optimal model using the smallest value. ## The final value used for the model was cp = 0.06162053. cat( &quot;Decision tree model 1 had&quot;, nrow(tree_fit1$resample), &quot;Run in total \\n&quot;) ## Decision tree model 1 had 5 Run in total #Second control parameters ctrl2 &lt;- trainControl(method = &quot;cv&quot;, number = 20) set.seed(1234) tree_fit2 &lt;- train(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data = cov_soil_Train, method = &quot;rpart&quot;, trControl = ctrl2) # display the results of decision tree tree_fit2 ## CART ## ## 271 samples ## 12 predictor ## ## No pre-processing ## Resampling: Cross-Validated (20 fold) ## Summary of sample sizes: 257, 256, 258, 258, 257, 256, ... ## Resampling results across tuning parameters: ## ## cp RMSE Rsquared MAE ## 0.06162053 13.77702 0.22658828 10.43208 ## 0.06856500 14.07502 0.20270384 10.74035 ## 0.18912794 14.85486 0.07527534 11.60622 ## ## RMSE was used to select the optimal model using the smallest value. ## The final value used for the model was cp = 0.06162053. cat( &quot;Decision tree model 2 had&quot;, nrow(tree_fit2$resample), &quot;Run in total \\n&quot;) ## Decision tree model 2 had 20 Run in total You can also repeat the cross-validation several time with the method = \"repeatedcv\" #Third control parameters ctrl3 &lt;- trainControl(method = &quot;repeatedcv&quot;, number = 5, repeats = 3) set.seed(1234) tree_fit3 &lt;- train(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data = cov_soil_Train, method = &quot;rpart&quot;, trControl = ctrl3) # display the results of decision tree tree_fit3 ## CART ## ## 271 samples ## 12 predictor ## ## No pre-processing ## Resampling: Cross-Validated (5 fold, repeated 3 times) ## Summary of sample sizes: 215, 217, 217, 218, 217, 215, ... ## Resampling results across tuning parameters: ## ## cp RMSE Rsquared MAE ## 0.06162053 13.98031 0.18955436 10.46265 ## 0.06856500 14.15751 0.17382230 10.58568 ## 0.18912794 14.67725 0.09851222 11.38858 ## ## RMSE was used to select the optimal model using the smallest value. ## The final value used for the model was cp = 0.06162053. cat( &quot;Decision tree model 3 had&quot;, nrow(tree_fit3$resample), &quot;Run in total \\n&quot;) ## Decision tree model 3 had 15 Run in total 6.11.2 Decision tree model tuning rpart.control() Function allows you to tune your decision tree model: cp is the complexity parameter that will set pruning. The lowest the number sits, the more complex the tree becomes. minsplit is the minimum number of observations needed for a split. minbucket is the minimum number of observations in a leaf. maxdepth is the maximum depth of the tree. On the parameters of the decision tree, you can specify the tuneGrid parameter from the caret training with an expand.grid() Figure 6.8: Decision tree parameters. # Create a decision tree with simpler parameters rpart_ctrl1 &lt;- rpart.control( cp = 0.05, # Complexity parameter minsplit = 20, # Minimum number of observations to split minbucket = 15, # Minimum number of observations in any terminal node maxdepth = 4 # Maximum depth of the tree ) set.seed(1234) tree_fit4 &lt;- rpart(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, method=&quot;anova&quot;, data=cov_soil_Train, control = rpart_ctrl1) # display the results of the more simple decision tree printcp(tree_fit4) ## ## Regression tree: ## rpart(formula = OC ~ CNBL + DEM + MCA + Slope + TWI + blue + ## green + red + nir + ndvi + rainfall + NPP, data = cov_soil_Train, ## method = &quot;anova&quot;, control = rpart_ctrl1) ## ## Variables actually used in tree construction: ## [1] green NPP Slope ## ## Root node error: 61351/271 = 226.39 ## ## n= 271 ## ## CP nsplit rel error xerror xstd ## 1 0.189128 0 1.00000 1.01112 0.104709 ## 2 0.068565 1 0.81087 0.84893 0.097943 ## 3 0.061621 2 0.74231 0.79133 0.094026 ## 4 0.050000 3 0.68069 0.78313 0.093608 # visualize the more simple tree rpart.plot(tree_fit4) # Create a decision tree with more complex parameters rpart_ctrl2 &lt;- rpart.control( cp = 0.0005, # Complexity parameter minsplit = 10, # Minimum number of observations to split minbucket = 5, # Minimum number of observations in any terminal node maxdepth = 8 # Maximum depth of the tree ) set.seed(1234) tree_fit5 &lt;- rpart(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, method=&quot;anova&quot;, data=cov_soil_Train, control = rpart_ctrl2) # display the results of the more simple decision tree printcp(tree_fit5) ## ## Regression tree: ## rpart(formula = OC ~ CNBL + DEM + MCA + Slope + TWI + blue + ## green + red + nir + ndvi + rainfall + NPP, data = cov_soil_Train, ## method = &quot;anova&quot;, control = rpart_ctrl2) ## ## Variables actually used in tree construction: ## [1] blue CNBL DEM green MCA ndvi nir NPP ## [9] rainfall red Slope TWI ## ## Root node error: 61351/271 = 226.39 ## ## n= 271 ## ## CP nsplit rel error xerror xstd ## 1 0.1891279 0 1.00000 1.01112 0.104709 ## 2 0.0685650 1 0.81087 0.84893 0.097943 ## 3 0.0616205 2 0.74231 0.83187 0.096378 ## 4 0.0434759 3 0.68069 0.80149 0.094160 ## 5 0.0345742 4 0.63721 0.82250 0.095723 ## 6 0.0333516 6 0.56806 0.81490 0.096209 ## 7 0.0256923 7 0.53471 0.85861 0.103798 ## 8 0.0221136 8 0.50902 0.85129 0.103001 ## 9 0.0184032 9 0.48690 0.86388 0.102180 ## 10 0.0163354 10 0.46850 0.83239 0.099363 ## 11 0.0163285 11 0.45217 0.84990 0.100276 ## 12 0.0151540 12 0.43584 0.84632 0.099720 ## 13 0.0134087 13 0.42068 0.84857 0.100390 ## 14 0.0118905 14 0.40727 0.83985 0.099958 ## 15 0.0098702 15 0.39538 0.89144 0.109507 ## 16 0.0087546 18 0.36577 0.92894 0.116296 ## 17 0.0071396 19 0.35702 0.92501 0.116260 ## 18 0.0063750 20 0.34988 0.93275 0.115394 ## 19 0.0057885 21 0.34350 0.93703 0.115343 ## 20 0.0046200 22 0.33772 0.95163 0.115323 ## 21 0.0036255 23 0.33310 0.96827 0.116000 ## 22 0.0031440 25 0.32584 0.96285 0.113771 ## 23 0.0027501 26 0.32270 0.96343 0.113770 ## 24 0.0019185 27 0.31995 0.96954 0.113830 ## 25 0.0010823 28 0.31803 0.96873 0.113780 ## 26 0.0009681 29 0.31695 0.97503 0.114070 ## 27 0.0005000 30 0.31598 0.97487 0.114053 # visualize the more simple tree rpart.plot(tree_fit5) 6.11.3 Random forest model tuning For the random forest algorithm, you have two main tuning parameters: ntree decides the number of decision trees to generate. By default, it is set at 500, which is a good number, but you can change it with the ntree = command line in the caret train function. mtry is the number of variables selected for each split; the higher it is, the more complex your model becomes. In the caret train function, you specify with the trainGrid = parameter. Figure 6.9: Random forest detailed schema. # First RF tree with less complexity ctrl &lt;- trainControl(method = &quot;cv&quot;, number = 10) rfGrid1 &lt;- expand.grid(.mtry = 3) set.seed(1234) rf_fit1 &lt;- train(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data = cov_soil_Train, method = &quot;rf&quot;, trControl = ctrl, tuneGrid = rfGrid1, ntree = 200) rf_fit1$finalModel ## ## Call: ## randomForest(x = x, y = y, ntree = 200, mtry = param$mtry) ## Type of random forest: regression ## Number of trees: 200 ## No. of variables tried at each split: 3 ## ## Mean of squared residuals: 147.4249 ## % Var explained: 34.88 rf_fit1$results ## mtry RMSE Rsquared MAE RMSESD RsquaredSD MAESD ## 1 3 11.67351 0.3984199 8.919224 2.01285 0.1343811 1.345439 # Second RF tree with more complexity rfGrid2 &lt;- expand.grid(.mtry = 6) set.seed(1234) rf_fit2 &lt;- train(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data = cov_soil_Train, method = &quot;rf&quot;, trControl = ctrl, tuneGrid = rfGrid2, ntree = 1000) rf_fit2$finalModel ## ## Call: ## randomForest(x = x, y = y, ntree = 1000, mtry = param$mtry) ## Type of random forest: regression ## Number of trees: 1000 ## No. of variables tried at each split: 6 ## ## Mean of squared residuals: 144.8437 ## % Var explained: 36.02 rf_fit2$results ## mtry RMSE Rsquared MAE RMSESD RsquaredSD MAESD ## 1 6 11.72908 0.3922939 8.954656 1.889745 0.1179939 1.255245 # Testing several tuning parameters at the same time rfGrid3 &lt;- expand.grid(.mtry = c(3:6)) set.seed(1234) rf_fit3 &lt;- train(OC ~ CNBL+DEM+MCA+Slope+TWI+blue+green+red+nir+ndvi+rainfall+NPP, data = cov_soil_Train, method = &quot;rf&quot;, trControl = ctrl, tuneGrid = rfGrid3, ntree = 500) rf_fit3$finalModel ## ## Call: ## randomForest(x = x, y = y, ntree = 500, mtry = param$mtry) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 4 ## ## Mean of squared residuals: 143.2986 ## % Var explained: 36.7 rf_fit3$results ## mtry RMSE Rsquared MAE RMSESD RsquaredSD MAESD ## 1 3 11.69037 0.3969708 8.892300 1.938197 0.1289380 1.268843 ## 2 4 11.68114 0.3955169 8.896886 1.862187 0.1186351 1.237828 ## 3 5 11.71240 0.3937666 8.912386 1.913175 0.1229028 1.264399 ## 4 6 11.71687 0.3921174 8.908756 1.921134 0.1210158 1.230857 6.12 Variables importance There are several ways of assessing the variable importance of the model and the node impurity. The ** Gini** index or Gini ratio provides a ranking of the attributes for splitting the data. It stores the sum of the squared probabilities of each class or value. it can be used for classification problems. \\(Gini = 1 - \\sum(P_i)^2\\) \\(i\\) = 1 to the number of classes. \\(P\\) = probabilities of each class. With 0, the Gini impurity index is at its lowest. It occurs only when all the elements of the split are from the same class/value. With a caret model trained you can use the varImp function to see the Gini index of all variables. Figure 6.10: Gini impurity index. \\(\\\\[0.25cm]\\) Figure 6.11: Gini formula example. \\(\\\\[0.2cm]\\) For regression problems MSE is a more adapted impurity measurement. \\(MSE = \\frac{1}{n} \\sum_{i=1}^{n}(Y_i - \\hat{Y}_i)^2\\) \\(n\\) = the number of measurements. \\(Y\\) = the observed value. \\(\\hat{Y}\\) = the predicted value # Ploting variable importance importance_rf &lt;- varImp(rf_fit3) importance_rf ## rf variable importance ## ## Overall ## Slope 100.000 ## TWI 91.693 ## NPP 86.851 ## MCA 78.089 ## CNBL 75.723 ## ndvi 73.076 ## red 57.213 ## nir 45.278 ## green 42.216 ## DEM 30.440 ## blue 8.825 ## rainfall 0.000 plot(importance_rf) # More complex plot using ggplot function # Set results in a df importance_data &lt;- as.data.frame(importance_rf$importance) importance_data$Variable &lt;- rownames(importance_data) # Scaled it in percent and organising it in decreasing order importance_data$Percentage &lt;- importance_data$Overall / sum(importance_data$Overall) * 100 importance_data &lt;- importance_data[order(importance_data$Percentage, decreasing = TRUE), ] # Create the graph importance_graph &lt;- ggplot(importance_data, aes(x = reorder(Variable, Percentage), y = Percentage)) + geom_bar(stat = &quot;identity&quot;, fill = &quot;skyblue&quot;, color = &quot;black&quot;, width = 0.7, alpha = 0.7) + coord_flip() + labs( title = &quot;Importance of variables in percent&quot;, x = &quot;Variable&quot;, y = &quot;Importance (%)&quot; ) + theme_classic() + theme( axis.text = element_text(size = 12, color = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;), plot.title = element_text(size = 16, face = &quot;bold&quot;, hjust = 0.5) ) + geom_text(aes(label = round(Percentage, 1)), hjust = -0.2, color = &quot;black&quot;, size = 4) + ylim(0, max(importance_data$Percentage) * 1.1) importance_graph # Option to export the plot #ggsave( &quot;./Variables_importance_RF.pdf&quot;, importance_graph, width = 20, height = 13, units = &quot;cm&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
